'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports System.Runtime.InteropServices

Namespace NotificationSystem.NotificationSystem.Data


    ''' <summary>
    ''' Represents a strongly typed in-memory cache of data.
    ''' </summary>
    <Global.System.SerializableAttribute()>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code")>
    <Global.System.ComponentModel.ToolboxItemAttribute(True)>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")>
    <Global.System.Xml.Serialization.XmlRootAttribute("xsReports")>
    <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>
    Public Partial Class xsReports
        Inherits Global.System.Data.DataSet

        Private tableAgent As NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable

        Private tableCustomer As NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable

        Private tableTroubleTicketReq As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable

        Private tablerptCustomer As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable

        Private tablerptAgent As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable

        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Sub New()
            Me.BeginInit()
            InitClass()
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected Sub New(info As Global.System.Runtime.Serialization.SerializationInfo, context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, False)
            If Me.IsBinarySerialized(info, context) = True Then
                InitVars(False)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
                AddHandler Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema = CStr(info.GetValue("XmlSchema", GetType(String)))
            If Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If ds.Tables("Agent") IsNot Nothing Then
                    MyBase.Tables.Add(New NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable(ds.Tables("Agent")))
                End If
                If ds.Tables("Customer") IsNot Nothing Then
                    MyBase.Tables.Add(New NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable(ds.Tables("Customer")))
                End If
                If ds.Tables("TroubleTicketReq") IsNot Nothing Then
                    MyBase.Tables.Add(New NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable(ds.Tables("TroubleTicketReq")))
                End If
                If ds.Tables("rptCustomer") IsNot Nothing Then
                    MyBase.Tables.Add(New NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable(ds.Tables("rptCustomer")))
                End If
                If ds.Tables("rptAgent") IsNot Nothing Then
                    MyBase.Tables.Add(New NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable(ds.Tables("rptAgent")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                InitVars()
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Relations.CollectionChanged, schemaChangedHandler
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.BrowsableAttribute(False)>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
        Public ReadOnly Property Agent As NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable
            Get
                Return tableAgent
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.BrowsableAttribute(False)>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
        Public ReadOnly Property Customer As NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable
            Get
                Return tableCustomer
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.BrowsableAttribute(False)>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
        Public ReadOnly Property TroubleTicketReq As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable
            Get
                Return tableTroubleTicketReq
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.BrowsableAttribute(False)>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
        Public ReadOnly Property rptCustomer As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable
            Get
                Return tablerptCustomer
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.BrowsableAttribute(False)>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
        Public ReadOnly Property rptAgent As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable
            Get
                Return tablerptAgent
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.BrowsableAttribute(True)>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>
        Public Overrides Property SchemaSerializationMode As Global.System.Data.SchemaSerializationMode
            Get
                Return _schemaSerializationMode
            End Get
            Set(value As Global.System.Data.SchemaSerializationMode)
                _schemaSerializationMode = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>
        Public Overloads ReadOnly Property Tables As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>
        Public Overloads ReadOnly Property Relations As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit()
            InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As NotificationSystem.NotificationSystem.Data.xsReports = CType((MyBase.Clone()), NotificationSystem.NotificationSystem.Data.xsReports)
            cln.InitVars()
            cln.SchemaSerializationMode = SchemaSerializationMode
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected Overrides Sub ReadXmlSerializable(reader As Global.System.Xml.XmlReader)
            If Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema Then
                Me.Reset()
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXml(reader)
                If ds.Tables("Agent") IsNot Nothing Then
                    MyBase.Tables.Add(New NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable(ds.Tables("Agent")))
                End If
                If ds.Tables("Customer") IsNot Nothing Then
                    MyBase.Tables.Add(New NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable(ds.Tables("Customer")))
                End If
                If ds.Tables("TroubleTicketReq") IsNot Nothing Then
                    MyBase.Tables.Add(New NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable(ds.Tables("TroubleTicketReq")))
                End If
                If ds.Tables("rptCustomer") IsNot Nothing Then
                    MyBase.Tables.Add(New NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable(ds.Tables("rptCustomer")))
                End If
                If ds.Tables("rptAgent") IsNot Nothing Then
                    MyBase.Tables.Add(New NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable(ds.Tables("rptAgent")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                InitVars()
            Else
                Me.ReadXml(reader)
                InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Friend Sub InitVars()
            InitVars(True)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Friend Sub InitVars(initTable As Boolean)
            tableAgent = CType(MyBase.Tables("Agent"), NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable)
            If initTable = True Then
                If tableAgent IsNot Nothing Then
                    tableAgent.InitVars()
                End If
            End If
            tableCustomer = CType(MyBase.Tables("Customer"), NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable)
            If initTable = True Then
                If tableCustomer IsNot Nothing Then
                    tableCustomer.InitVars()
                End If
            End If
            tableTroubleTicketReq = CType(MyBase.Tables("TroubleTicketReq"), NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable)
            If initTable = True Then
                If tableTroubleTicketReq IsNot Nothing Then
                    tableTroubleTicketReq.InitVars()
                End If
            End If
            tablerptCustomer = CType(MyBase.Tables("rptCustomer"), NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable)
            If initTable = True Then
                If tablerptCustomer IsNot Nothing Then
                    tablerptCustomer.InitVars()
                End If
            End If
            tablerptAgent = CType(MyBase.Tables("rptAgent"), NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable)
            If initTable = True Then
                If tablerptAgent IsNot Nothing Then
                    tablerptAgent.InitVars()
                End If
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Sub InitClass()
            Me.DataSetName = "xsReports"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/xsReports.xsd"
            Me.EnforceConstraints = True
            SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            tableAgent = New NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable()
            MyBase.Tables.Add(tableAgent)
            tableCustomer = New NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable()
            MyBase.Tables.Add(tableCustomer)
            tableTroubleTicketReq = New NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable()
            MyBase.Tables.Add(tableTroubleTicketReq)
            tablerptCustomer = New NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable()
            MyBase.Tables.Add(tablerptCustomer)
            tablerptAgent = New NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable()
            MyBase.Tables.Add(tablerptAgent)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Function ShouldSerializeAgent() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Function ShouldSerializeCustomer() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Function ShouldSerializeTroubleTicketReq() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Function ShouldSerializerptCustomer() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Function ShouldSerializerptAgent() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Sub SchemaChanged(sender As Object, e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove Then
                InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Shared Function GetTypedDataSetSchema(xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As NotificationSystem.NotificationSystem.Data.xsReports = New NotificationSystem.NotificationSystem.Data.xsReports()
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(CStr(dsSchema.TargetNamespace)).GetEnumerator()

                    While schemas.MoveNext()
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If s1.Length = s2.Length Then
                            s1.Position = 0
                            s2.Position = 0
                            While (s1.Position <> s1.Length AndAlso (s1.ReadByte() = s2.ReadByte()))
                            End While
                            If s1.Position = s1.Length Then
                                Return type
                            End If
                        End If
                    End While

                Finally
                    If s1 IsNot Nothing Then
                        s1.Close()
                    End If
                    If s2 IsNot Nothing Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Delegate Sub AgentRowChangeEventHandler(sender As Object, e As NotificationSystem.NotificationSystem.Data.xsReports.AgentRowChangeEvent)

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Delegate Sub CustomerRowChangeEventHandler(sender As Object, e As NotificationSystem.NotificationSystem.Data.xsReports.CustomerRowChangeEvent)

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Delegate Sub TroubleTicketReqRowChangeEventHandler(sender As Object, e As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRowChangeEvent)

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Delegate Sub rptCustomerRowChangeEventHandler(sender As Object, e As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRowChangeEvent)

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Delegate Sub rptAgentRowChangeEventHandler(sender As Object, e As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRowChangeEvent)

        ''' <summary>
        ''' Represents the strongly named DataTable class.
        ''' </summary>
        <Global.System.SerializableAttribute()>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
        Public Partial Class AgentDataTable
            Inherits Global.System.Data.TypedTableBase(Of NotificationSystem.NotificationSystem.Data.xsReports.AgentRow)

            Private columnAgentID As Global.System.Data.DataColumn

            Private columnTroubleTicketNo As Global.System.Data.DataColumn

            Private columnTitle As Global.System.Data.DataColumn

            Private columnStartDate As Global.System.Data.DataColumn

            Private columnSalary As Global.System.Data.DataColumn

            Private columnFirstN As Global.System.Data.DataColumn

            Private columnLastN As Global.System.Data.DataColumn

            Private columnEmail As Global.System.Data.DataColumn

            Private columnPhone As Global.System.Data.DataColumn

            Private columnFax As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub New()
                Me.TableName = "Agent"
                Me.BeginInit()
                InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Friend Sub New(table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If table.CaseSensitive <> table.DataSet.CaseSensitive Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (Not Equals(table.Locale.ToString(), table.DataSet.Locale.ToString())) Then
                    Me.Locale = table.Locale
                End If
                If Not Equals(table.Namespace, table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Sub New(info As Global.System.Runtime.Serialization.SerializationInfo, context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property AgentIDColumn As Global.System.Data.DataColumn
                Get
                    Return columnAgentID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property TroubleTicketNoColumn As Global.System.Data.DataColumn
                Get
                    Return columnTroubleTicketNo
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property TitleColumn As Global.System.Data.DataColumn
                Get
                    Return columnTitle
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property StartDateColumn As Global.System.Data.DataColumn
                Get
                    Return columnStartDate
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property SalaryColumn As Global.System.Data.DataColumn
                Get
                    Return columnSalary
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property FirstNColumn As Global.System.Data.DataColumn
                Get
                    Return columnFirstN
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property LastNColumn As Global.System.Data.DataColumn
                Get
                    Return columnLastN
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property EmailColumn As Global.System.Data.DataColumn
                Get
                    Return columnEmail
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property PhoneColumn As Global.System.Data.DataColumn
                Get
                    Return columnPhone
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property FaxColumn As Global.System.Data.DataColumn
                Get
                    Return columnFax
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            <Global.System.ComponentModel.BrowsableAttribute(False)>
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Default Public ReadOnly Property Item(index As Integer) As NotificationSystem.NotificationSystem.Data.xsReports.AgentRow
                Get
                    Return CType(Me.Rows(index), NotificationSystem.NotificationSystem.Data.xsReports.AgentRow)
                End Get
            End Property

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event AgentRowChanging As NotificationSystem.NotificationSystem.Data.xsReports.AgentRowChangeEventHandler

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event AgentRowChanged As NotificationSystem.NotificationSystem.Data.xsReports.AgentRowChangeEventHandler

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event AgentRowDeleting As NotificationSystem.NotificationSystem.Data.xsReports.AgentRowChangeEventHandler

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event AgentRowDeleted As NotificationSystem.NotificationSystem.Data.xsReports.AgentRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub AddAgentRow(row As NotificationSystem.NotificationSystem.Data.xsReports.AgentRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function AddAgentRow(TroubleTicketNo As Integer, Title As String, StartDate As Date, Salary As String, FirstN As String, LastN As String, Email As String, Phone As String, Fax As String) As NotificationSystem.NotificationSystem.Data.xsReports.AgentRow
                Dim rowAgentRow As NotificationSystem.NotificationSystem.Data.xsReports.AgentRow = CType((Me.NewRow()), NotificationSystem.NotificationSystem.Data.xsReports.AgentRow)
                Dim columnValuesArray = New Object() {Nothing, TroubleTicketNo, Title, StartDate, Salary, FirstN, LastN, Email, Phone, Fax}
                rowAgentRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowAgentRow)
                Return rowAgentRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function FindByAgentID(AgentID As Integer) As NotificationSystem.NotificationSystem.Data.xsReports.AgentRow
                Return CType(Me.Rows.Find(New Object() {AgentID}), NotificationSystem.NotificationSystem.Data.xsReports.AgentRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable = CType((MyBase.Clone()), NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable)
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Friend Sub InitVars()
                columnAgentID = MyBase.Columns("AgentID")
                columnTroubleTicketNo = MyBase.Columns("TroubleTicketNo")
                columnTitle = MyBase.Columns("Title")
                columnStartDate = MyBase.Columns("StartDate")
                columnSalary = MyBase.Columns("Salary")
                columnFirstN = MyBase.Columns("FirstN")
                columnLastN = MyBase.Columns("LastN")
                columnEmail = MyBase.Columns("Email")
                columnPhone = MyBase.Columns("Phone")
                columnFax = MyBase.Columns("Fax")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Private Sub InitClass()
                columnAgentID = New Global.System.Data.DataColumn("AgentID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnAgentID)
                columnTroubleTicketNo = New Global.System.Data.DataColumn("TroubleTicketNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnTroubleTicketNo)
                columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnTitle)
                columnStartDate = New Global.System.Data.DataColumn("StartDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnStartDate)
                columnSalary = New Global.System.Data.DataColumn("Salary", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnSalary)
                columnFirstN = New Global.System.Data.DataColumn("FirstN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnFirstN)
                columnLastN = New Global.System.Data.DataColumn("LastN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnLastN)
                columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnEmail)
                columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnPhone)
                columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnFax)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {columnAgentID}, True))
                columnAgentID.AutoIncrement = True
                columnAgentID.AutoIncrementSeed = -1
                columnAgentID.AutoIncrementStep = -1
                columnAgentID.AllowDBNull = False
                columnAgentID.ReadOnly = True
                columnAgentID.Unique = True
                columnTitle.MaxLength = 50
                columnSalary.MaxLength = 10
                columnFirstN.MaxLength = 50
                columnLastN.MaxLength = 50
                columnEmail.MaxLength = 2147483647
                columnPhone.MaxLength = 10
                columnFax.MaxLength = 10
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function NewAgentRow() As NotificationSystem.NotificationSystem.Data.xsReports.AgentRow
                Return CType((Me.NewRow()), NotificationSystem.NotificationSystem.Data.xsReports.AgentRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Function NewRowFromBuilder(builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New NotificationSystem.NotificationSystem.Data.xsReports.AgentRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(NotificationSystem.NotificationSystem.Data.xsReports.AgentRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowChanged(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                RaiseEvent AgentRowChangedEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.AgentRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.AgentRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowChanging(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                RaiseEvent AgentRowChangingEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.AgentRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.AgentRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowDeleted(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                RaiseEvent AgentRowDeletedEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.AgentRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.AgentRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowDeleting(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                RaiseEvent AgentRowDeletingEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.AgentRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.AgentRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub RemoveAgentRow(row As NotificationSystem.NotificationSystem.Data.xsReports.AgentRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Shared Function GetTypedTableSchema(xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As NotificationSystem.NotificationSystem.Data.xsReports = New NotificationSystem.NotificationSystem.Data.xsReports()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "AgentDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(CStr(dsSchema.TargetNamespace)).GetEnumerator()

                        While schemas.MoveNext()
                            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If s1.Length = s2.Length Then
                                s1.Position = 0
                                s2.Position = 0
                                While (s1.Position <> s1.Length AndAlso (s1.ReadByte() = s2.ReadByte()))
                                End While
                                If s1.Position = s1.Length Then
                                    Return type
                                End If
                            End If
                        End While

                    Finally
                        If s1 IsNot Nothing Then
                            s1.Close()
                        End If
                        If s2 IsNot Nothing Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        ''' <summary>
        ''' Represents the strongly named DataTable class.
        ''' </summary>
        <Global.System.SerializableAttribute()>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
        Public Partial Class CustomerDataTable
            Inherits Global.System.Data.TypedTableBase(Of NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow)

            Private columnCustomerID As Global.System.Data.DataColumn

            Private columnAgentID As Global.System.Data.DataColumn

            Private columnTroubleTicketNo As Global.System.Data.DataColumn

            Private columnFirstN As Global.System.Data.DataColumn

            Private columnLastN As Global.System.Data.DataColumn

            Private columnEmail As Global.System.Data.DataColumn

            Private columnPhone As Global.System.Data.DataColumn

            Private columnAddress As Global.System.Data.DataColumn

            Private columnCity As Global.System.Data.DataColumn

            Private columnState As Global.System.Data.DataColumn

            Private columnZip As Global.System.Data.DataColumn

            Private columnUserName As Global.System.Data.DataColumn

            Private columnPassword As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub New()
                Me.TableName = "Customer"
                Me.BeginInit()
                InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Friend Sub New(table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If table.CaseSensitive <> table.DataSet.CaseSensitive Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (Not Equals(table.Locale.ToString(), table.DataSet.Locale.ToString())) Then
                    Me.Locale = table.Locale
                End If
                If Not Equals(table.Namespace, table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Sub New(info As Global.System.Runtime.Serialization.SerializationInfo, context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property CustomerIDColumn As Global.System.Data.DataColumn
                Get
                    Return columnCustomerID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property AgentIDColumn As Global.System.Data.DataColumn
                Get
                    Return columnAgentID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property TroubleTicketNoColumn As Global.System.Data.DataColumn
                Get
                    Return columnTroubleTicketNo
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property FirstNColumn As Global.System.Data.DataColumn
                Get
                    Return columnFirstN
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property LastNColumn As Global.System.Data.DataColumn
                Get
                    Return columnLastN
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property EmailColumn As Global.System.Data.DataColumn
                Get
                    Return columnEmail
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property PhoneColumn As Global.System.Data.DataColumn
                Get
                    Return columnPhone
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property AddressColumn As Global.System.Data.DataColumn
                Get
                    Return columnAddress
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property CityColumn As Global.System.Data.DataColumn
                Get
                    Return columnCity
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property StateColumn As Global.System.Data.DataColumn
                Get
                    Return columnState
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property ZipColumn As Global.System.Data.DataColumn
                Get
                    Return columnZip
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property UserNameColumn As Global.System.Data.DataColumn
                Get
                    Return columnUserName
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property PasswordColumn As Global.System.Data.DataColumn
                Get
                    Return columnPassword
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            <Global.System.ComponentModel.BrowsableAttribute(False)>
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Default Public ReadOnly Property Item(index As Integer) As NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow
                Get
                    Return CType(Me.Rows(index), NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow)
                End Get
            End Property

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event CustomerRowChanging As NotificationSystem.NotificationSystem.Data.xsReports.CustomerRowChangeEventHandler

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event CustomerRowChanged As NotificationSystem.NotificationSystem.Data.xsReports.CustomerRowChangeEventHandler

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event CustomerRowDeleting As NotificationSystem.NotificationSystem.Data.xsReports.CustomerRowChangeEventHandler

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event CustomerRowDeleted As NotificationSystem.NotificationSystem.Data.xsReports.CustomerRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub AddCustomerRow(row As NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function AddCustomerRow(AgentID As Integer, TroubleTicketNo As Integer, FirstN As String, LastN As String, Email As String, Phone As String, Address As String, City As String, State As String, Zip As String, UserName As String, Password As String) As NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow
                Dim rowCustomerRow As NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow = CType((Me.NewRow()), NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow)
                Dim columnValuesArray = New Object() {Nothing, AgentID, TroubleTicketNo, FirstN, LastN, Email, Phone, Address, City, State, Zip, UserName, Password}
                rowCustomerRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowCustomerRow)
                Return rowCustomerRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function FindByCustomerID(CustomerID As Integer) As NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow
                Return CType(Me.Rows.Find(New Object() {CustomerID}), NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable = CType((MyBase.Clone()), NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable)
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Friend Sub InitVars()
                columnCustomerID = MyBase.Columns("CustomerID")
                columnAgentID = MyBase.Columns("AgentID")
                columnTroubleTicketNo = MyBase.Columns("TroubleTicketNo")
                columnFirstN = MyBase.Columns("FirstN")
                columnLastN = MyBase.Columns("LastN")
                columnEmail = MyBase.Columns("Email")
                columnPhone = MyBase.Columns("Phone")
                columnAddress = MyBase.Columns("Address")
                columnCity = MyBase.Columns("City")
                columnState = MyBase.Columns("State")
                columnZip = MyBase.Columns("Zip")
                columnUserName = MyBase.Columns("UserName")
                columnPassword = MyBase.Columns("Password")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Private Sub InitClass()
                columnCustomerID = New Global.System.Data.DataColumn("CustomerID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnCustomerID)
                columnAgentID = New Global.System.Data.DataColumn("AgentID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnAgentID)
                columnTroubleTicketNo = New Global.System.Data.DataColumn("TroubleTicketNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnTroubleTicketNo)
                columnFirstN = New Global.System.Data.DataColumn("FirstN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnFirstN)
                columnLastN = New Global.System.Data.DataColumn("LastN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnLastN)
                columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnEmail)
                columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnPhone)
                columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnAddress)
                columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnCity)
                columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnState)
                columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnZip)
                columnUserName = New Global.System.Data.DataColumn("UserName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnUserName)
                columnPassword = New Global.System.Data.DataColumn("Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnPassword)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {columnCustomerID}, True))
                columnCustomerID.AutoIncrement = True
                columnCustomerID.AutoIncrementSeed = -1
                columnCustomerID.AutoIncrementStep = -1
                columnCustomerID.AllowDBNull = False
                columnCustomerID.ReadOnly = True
                columnCustomerID.Unique = True
                columnAgentID.AllowDBNull = False
                columnTroubleTicketNo.AllowDBNull = False
                columnFirstN.MaxLength = 50
                columnLastN.MaxLength = 50
                columnEmail.MaxLength = 2147483647
                columnPhone.MaxLength = 10
                columnAddress.MaxLength = 50
                columnCity.MaxLength = 50
                columnState.MaxLength = 50
                columnZip.MaxLength = 10
                columnUserName.MaxLength = 10
                columnPassword.MaxLength = 10
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function NewCustomerRow() As NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow
                Return CType((Me.NewRow()), NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Function NewRowFromBuilder(builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowChanged(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                RaiseEvent CustomerRowChangedEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.CustomerRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowChanging(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                RaiseEvent CustomerRowChangingEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.CustomerRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowDeleted(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                RaiseEvent CustomerRowDeletedEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.CustomerRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowDeleting(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                RaiseEvent CustomerRowDeletingEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.CustomerRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub RemoveCustomerRow(row As NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Shared Function GetTypedTableSchema(xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As NotificationSystem.NotificationSystem.Data.xsReports = New NotificationSystem.NotificationSystem.Data.xsReports()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "CustomerDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(CStr(dsSchema.TargetNamespace)).GetEnumerator()

                        While schemas.MoveNext()
                            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If s1.Length = s2.Length Then
                                s1.Position = 0
                                s2.Position = 0
                                While (s1.Position <> s1.Length AndAlso (s1.ReadByte() = s2.ReadByte()))
                                End While
                                If s1.Position = s1.Length Then
                                    Return type
                                End If
                            End If
                        End While

                    Finally
                        If s1 IsNot Nothing Then
                            s1.Close()
                        End If
                        If s2 IsNot Nothing Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        ''' <summary>
        ''' Represents the strongly named DataTable class.
        ''' </summary>
        <Global.System.SerializableAttribute()>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
        Public Partial Class TroubleTicketReqDataTable
            Inherits Global.System.Data.TypedTableBase(Of NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow)

            Private columnAgentID As Global.System.Data.DataColumn

            Private columnCustomerID As Global.System.Data.DataColumn

            Private columnTroubleTicketNo As Global.System.Data.DataColumn

            Private columnStatus As Global.System.Data.DataColumn

            Private columnType As Global.System.Data.DataColumn

            Private columnDueDate As Global.System.Data.DataColumn

            Private columnRequestDate As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub New()
                Me.TableName = "TroubleTicketReq"
                Me.BeginInit()
                InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Friend Sub New(table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If table.CaseSensitive <> table.DataSet.CaseSensitive Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (Not Equals(table.Locale.ToString(), table.DataSet.Locale.ToString())) Then
                    Me.Locale = table.Locale
                End If
                If Not Equals(table.Namespace, table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Sub New(info As Global.System.Runtime.Serialization.SerializationInfo, context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property AgentIDColumn As Global.System.Data.DataColumn
                Get
                    Return columnAgentID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property CustomerIDColumn As Global.System.Data.DataColumn
                Get
                    Return columnCustomerID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property TroubleTicketNoColumn As Global.System.Data.DataColumn
                Get
                    Return columnTroubleTicketNo
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property StatusColumn As Global.System.Data.DataColumn
                Get
                    Return columnStatus
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property TypeColumn As Global.System.Data.DataColumn
                Get
                    Return columnType
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property DueDateColumn As Global.System.Data.DataColumn
                Get
                    Return columnDueDate
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property RequestDateColumn As Global.System.Data.DataColumn
                Get
                    Return columnRequestDate
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            <Global.System.ComponentModel.BrowsableAttribute(False)>
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Default Public ReadOnly Property Item(index As Integer) As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow
                Get
                    Return CType(Me.Rows(index), NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow)
                End Get
            End Property

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event TroubleTicketReqRowChanging As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRowChangeEventHandler

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event TroubleTicketReqRowChanged As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRowChangeEventHandler

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event TroubleTicketReqRowDeleting As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRowChangeEventHandler

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event TroubleTicketReqRowDeleted As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub AddTroubleTicketReqRow(row As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function AddTroubleTicketReqRow(AgentID As Integer, CustomerID As Integer, Status As String, Type As String, DueDate As Date, RequestDate As Date) As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow
                Dim rowTroubleTicketReqRow As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow = CType((Me.NewRow()), NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow)
                Dim columnValuesArray = New Object() {AgentID, CustomerID, Nothing, Status, Type, DueDate, RequestDate}
                rowTroubleTicketReqRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowTroubleTicketReqRow)
                Return rowTroubleTicketReqRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function FindByTroubleTicketNo(TroubleTicketNo As Integer) As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow
                Return CType(Me.Rows.Find(New Object() {TroubleTicketNo}), NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable = CType((MyBase.Clone()), NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable)
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Friend Sub InitVars()
                columnAgentID = MyBase.Columns("AgentID")
                columnCustomerID = MyBase.Columns("CustomerID")
                columnTroubleTicketNo = MyBase.Columns("TroubleTicketNo")
                columnStatus = MyBase.Columns("Status")
                columnType = MyBase.Columns("Type")
                columnDueDate = MyBase.Columns("DueDate")
                columnRequestDate = MyBase.Columns("RequestDate")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Private Sub InitClass()
                columnAgentID = New Global.System.Data.DataColumn("AgentID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnAgentID)
                columnCustomerID = New Global.System.Data.DataColumn("CustomerID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnCustomerID)
                columnTroubleTicketNo = New Global.System.Data.DataColumn("TroubleTicketNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnTroubleTicketNo)
                columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnStatus)
                columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnType)
                columnDueDate = New Global.System.Data.DataColumn("DueDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnDueDate)
                columnRequestDate = New Global.System.Data.DataColumn("RequestDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnRequestDate)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {columnTroubleTicketNo}, True))
                columnTroubleTicketNo.AutoIncrement = True
                columnTroubleTicketNo.AutoIncrementSeed = -1
                columnTroubleTicketNo.AutoIncrementStep = -1
                columnTroubleTicketNo.AllowDBNull = False
                columnTroubleTicketNo.ReadOnly = True
                columnTroubleTicketNo.Unique = True
                columnStatus.MaxLength = 10
                columnType.MaxLength = 10
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function NewTroubleTicketReqRow() As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow
                Return CType((Me.NewRow()), NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Function NewRowFromBuilder(builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowChanged(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                RaiseEvent TroubleTicketReqRowChangedEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowChanging(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                RaiseEvent TroubleTicketReqRowChangingEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowDeleted(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                RaiseEvent TroubleTicketReqRowDeletedEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowDeleting(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                RaiseEvent TroubleTicketReqRowDeletingEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub RemoveTroubleTicketReqRow(row As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Shared Function GetTypedTableSchema(xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As NotificationSystem.NotificationSystem.Data.xsReports = New NotificationSystem.NotificationSystem.Data.xsReports()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "TroubleTicketReqDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(CStr(dsSchema.TargetNamespace)).GetEnumerator()

                        While schemas.MoveNext()
                            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If s1.Length = s2.Length Then
                                s1.Position = 0
                                s2.Position = 0
                                While (s1.Position <> s1.Length AndAlso (s1.ReadByte() = s2.ReadByte()))
                                End While
                                If s1.Position = s1.Length Then
                                    Return type
                                End If
                            End If
                        End While

                    Finally
                        If s1 IsNot Nothing Then
                            s1.Close()
                        End If
                        If s2 IsNot Nothing Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        ''' <summary>
        ''' Represents the strongly named DataTable class.
        ''' </summary>
        <Global.System.SerializableAttribute()>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
        Public Partial Class rptCustomerDataTable
            Inherits Global.System.Data.TypedTableBase(Of NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow)

            Private columnCustomerID As Global.System.Data.DataColumn

            Private columnFirstN As Global.System.Data.DataColumn

            Private columnLastN As Global.System.Data.DataColumn

            Private columnEmail As Global.System.Data.DataColumn

            Private columnPhone As Global.System.Data.DataColumn

            Private columnAddress As Global.System.Data.DataColumn

            Private columnCity As Global.System.Data.DataColumn

            Private columnState As Global.System.Data.DataColumn

            Private columnZip As Global.System.Data.DataColumn

            Private columnTroubleTicketNo As Global.System.Data.DataColumn

            Private columnStatus As Global.System.Data.DataColumn

            Private columnType As Global.System.Data.DataColumn

            Private columnRequestDate As Global.System.Data.DataColumn

            Private columnDueDate As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub New()
                Me.TableName = "rptCustomer"
                Me.BeginInit()
                InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Friend Sub New(table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If table.CaseSensitive <> table.DataSet.CaseSensitive Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (Not Equals(table.Locale.ToString(), table.DataSet.Locale.ToString())) Then
                    Me.Locale = table.Locale
                End If
                If Not Equals(table.Namespace, table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Sub New(info As Global.System.Runtime.Serialization.SerializationInfo, context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property CustomerIDColumn As Global.System.Data.DataColumn
                Get
                    Return columnCustomerID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property FirstNColumn As Global.System.Data.DataColumn
                Get
                    Return columnFirstN
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property LastNColumn As Global.System.Data.DataColumn
                Get
                    Return columnLastN
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property EmailColumn As Global.System.Data.DataColumn
                Get
                    Return columnEmail
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property PhoneColumn As Global.System.Data.DataColumn
                Get
                    Return columnPhone
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property AddressColumn As Global.System.Data.DataColumn
                Get
                    Return columnAddress
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property CityColumn As Global.System.Data.DataColumn
                Get
                    Return columnCity
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property StateColumn As Global.System.Data.DataColumn
                Get
                    Return columnState
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property ZipColumn As Global.System.Data.DataColumn
                Get
                    Return columnZip
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property TroubleTicketNoColumn As Global.System.Data.DataColumn
                Get
                    Return columnTroubleTicketNo
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property StatusColumn As Global.System.Data.DataColumn
                Get
                    Return columnStatus
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property TypeColumn As Global.System.Data.DataColumn
                Get
                    Return columnType
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property RequestDateColumn As Global.System.Data.DataColumn
                Get
                    Return columnRequestDate
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property DueDateColumn As Global.System.Data.DataColumn
                Get
                    Return columnDueDate
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            <Global.System.ComponentModel.BrowsableAttribute(False)>
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Default Public ReadOnly Property Item(index As Integer) As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow
                Get
                    Return CType(Me.Rows(index), NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow)
                End Get
            End Property

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event rptCustomerRowChanging As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRowChangeEventHandler

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event rptCustomerRowChanged As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRowChangeEventHandler

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event rptCustomerRowDeleting As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRowChangeEventHandler

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event rptCustomerRowDeleted As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub AddrptCustomerRow(row As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function AddrptCustomerRow(FirstN As String, LastN As String, Email As String, Phone As String, Address As String, City As String, State As String, Zip As String, Status As String, Type As String, RequestDate As Date, DueDate As Date) As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow
                Dim rowrptCustomerRow As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow = CType((Me.NewRow()), NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow)
                Dim columnValuesArray = New Object() {Nothing, FirstN, LastN, Email, Phone, Address, City, State, Zip, Nothing, Status, Type, RequestDate, DueDate}
                rowrptCustomerRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowrptCustomerRow)
                Return rowrptCustomerRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function FindByCustomerIDTroubleTicketNo(CustomerID As Integer, TroubleTicketNo As Integer) As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow
                Return CType(Me.Rows.Find(New Object() {CustomerID, TroubleTicketNo}), NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable = CType((MyBase.Clone()), NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable)
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Friend Sub InitVars()
                columnCustomerID = MyBase.Columns("CustomerID")
                columnFirstN = MyBase.Columns("FirstN")
                columnLastN = MyBase.Columns("LastN")
                columnEmail = MyBase.Columns("Email")
                columnPhone = MyBase.Columns("Phone")
                columnAddress = MyBase.Columns("Address")
                columnCity = MyBase.Columns("City")
                columnState = MyBase.Columns("State")
                columnZip = MyBase.Columns("Zip")
                columnTroubleTicketNo = MyBase.Columns("TroubleTicketNo")
                columnStatus = MyBase.Columns("Status")
                columnType = MyBase.Columns("Type")
                columnRequestDate = MyBase.Columns("RequestDate")
                columnDueDate = MyBase.Columns("DueDate")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Private Sub InitClass()
                columnCustomerID = New Global.System.Data.DataColumn("CustomerID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnCustomerID)
                columnFirstN = New Global.System.Data.DataColumn("FirstN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnFirstN)
                columnLastN = New Global.System.Data.DataColumn("LastN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnLastN)
                columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnEmail)
                columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnPhone)
                columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnAddress)
                columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnCity)
                columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnState)
                columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnZip)
                columnTroubleTicketNo = New Global.System.Data.DataColumn("TroubleTicketNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnTroubleTicketNo)
                columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnStatus)
                columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnType)
                columnRequestDate = New Global.System.Data.DataColumn("RequestDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnRequestDate)
                columnDueDate = New Global.System.Data.DataColumn("DueDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnDueDate)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {columnCustomerID, columnTroubleTicketNo}, True))
                columnCustomerID.AutoIncrement = True
                columnCustomerID.AutoIncrementSeed = -1
                columnCustomerID.AutoIncrementStep = -1
                columnCustomerID.AllowDBNull = False
                columnCustomerID.ReadOnly = True
                columnFirstN.MaxLength = 50
                columnLastN.MaxLength = 50
                columnEmail.MaxLength = 2147483647
                columnPhone.MaxLength = 10
                columnAddress.MaxLength = 50
                columnCity.MaxLength = 50
                columnState.MaxLength = 50
                columnZip.MaxLength = 10
                columnTroubleTicketNo.AutoIncrement = True
                columnTroubleTicketNo.AutoIncrementSeed = -1
                columnTroubleTicketNo.AutoIncrementStep = -1
                columnTroubleTicketNo.AllowDBNull = False
                columnTroubleTicketNo.ReadOnly = True
                columnStatus.MaxLength = 10
                columnType.MaxLength = 10
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function NewrptCustomerRow() As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow
                Return CType((Me.NewRow()), NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Function NewRowFromBuilder(builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowChanged(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                RaiseEvent rptCustomerRowChangedEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowChanging(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                RaiseEvent rptCustomerRowChangingEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowDeleted(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                RaiseEvent rptCustomerRowDeletedEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowDeleting(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                RaiseEvent rptCustomerRowDeletingEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub RemoverptCustomerRow(row As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Shared Function GetTypedTableSchema(xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As NotificationSystem.NotificationSystem.Data.xsReports = New NotificationSystem.NotificationSystem.Data.xsReports()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "rptCustomerDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(CStr(dsSchema.TargetNamespace)).GetEnumerator()

                        While schemas.MoveNext()
                            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If s1.Length = s2.Length Then
                                s1.Position = 0
                                s2.Position = 0
                                While (s1.Position <> s1.Length AndAlso (s1.ReadByte() = s2.ReadByte()))
                                End While
                                If s1.Position = s1.Length Then
                                    Return type
                                End If
                            End If
                        End While

                    Finally
                        If s1 IsNot Nothing Then
                            s1.Close()
                        End If
                        If s2 IsNot Nothing Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        ''' <summary>
        ''' Represents the strongly named DataTable class.
        ''' </summary>
        <Global.System.SerializableAttribute()>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
        Public Partial Class rptAgentDataTable
            Inherits Global.System.Data.TypedTableBase(Of NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow)

            Private columnAgentID As Global.System.Data.DataColumn

            Private columnTitle As Global.System.Data.DataColumn

            Private columnFirstN As Global.System.Data.DataColumn

            Private columnLastN As Global.System.Data.DataColumn

            Private columnEmail As Global.System.Data.DataColumn

            Private columnPhone As Global.System.Data.DataColumn

            Private columnFax As Global.System.Data.DataColumn

            Private columnTroubleTicketNo As Global.System.Data.DataColumn

            Private columnStatus As Global.System.Data.DataColumn

            Private columnType As Global.System.Data.DataColumn

            Private columnRequestDate As Global.System.Data.DataColumn

            Private columnDueDate As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub New()
                Me.TableName = "rptAgent"
                Me.BeginInit()
                InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Friend Sub New(table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If table.CaseSensitive <> table.DataSet.CaseSensitive Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (Not Equals(table.Locale.ToString(), table.DataSet.Locale.ToString())) Then
                    Me.Locale = table.Locale
                End If
                If Not Equals(table.Namespace, table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Sub New(info As Global.System.Runtime.Serialization.SerializationInfo, context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property AgentIDColumn As Global.System.Data.DataColumn
                Get
                    Return columnAgentID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property TitleColumn As Global.System.Data.DataColumn
                Get
                    Return columnTitle
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property FirstNColumn As Global.System.Data.DataColumn
                Get
                    Return columnFirstN
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property LastNColumn As Global.System.Data.DataColumn
                Get
                    Return columnLastN
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property EmailColumn As Global.System.Data.DataColumn
                Get
                    Return columnEmail
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property PhoneColumn As Global.System.Data.DataColumn
                Get
                    Return columnPhone
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property FaxColumn As Global.System.Data.DataColumn
                Get
                    Return columnFax
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property TroubleTicketNoColumn As Global.System.Data.DataColumn
                Get
                    Return columnTroubleTicketNo
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property StatusColumn As Global.System.Data.DataColumn
                Get
                    Return columnStatus
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property TypeColumn As Global.System.Data.DataColumn
                Get
                    Return columnType
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property RequestDateColumn As Global.System.Data.DataColumn
                Get
                    Return columnRequestDate
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property DueDateColumn As Global.System.Data.DataColumn
                Get
                    Return columnDueDate
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            <Global.System.ComponentModel.BrowsableAttribute(False)>
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Default Public ReadOnly Property Item(index As Integer) As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow
                Get
                    Return CType(Me.Rows(index), NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow)
                End Get
            End Property

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event rptAgentRowChanging As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRowChangeEventHandler

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event rptAgentRowChanged As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRowChangeEventHandler

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event rptAgentRowDeleting As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRowChangeEventHandler

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Event rptAgentRowDeleted As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub AddrptAgentRow(row As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function AddrptAgentRow(Title As String, FirstN As String, LastN As String, Email As String, Phone As String, Fax As String, Status As String, Type As String, RequestDate As Date, DueDate As Date) As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow
                Dim rowrptAgentRow As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow = CType((Me.NewRow()), NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow)
                Dim columnValuesArray = New Object() {Nothing, Title, FirstN, LastN, Email, Phone, Fax, Nothing, Status, Type, RequestDate, DueDate}
                rowrptAgentRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowrptAgentRow)
                Return rowrptAgentRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function FindByAgentIDTroubleTicketNo(AgentID As Integer, TroubleTicketNo As Integer) As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow
                Return CType(Me.Rows.Find(New Object() {AgentID, TroubleTicketNo}), NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable = CType((MyBase.Clone()), NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable)
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Friend Sub InitVars()
                columnAgentID = MyBase.Columns("AgentID")
                columnTitle = MyBase.Columns("Title")
                columnFirstN = MyBase.Columns("FirstN")
                columnLastN = MyBase.Columns("LastN")
                columnEmail = MyBase.Columns("Email")
                columnPhone = MyBase.Columns("Phone")
                columnFax = MyBase.Columns("Fax")
                columnTroubleTicketNo = MyBase.Columns("TroubleTicketNo")
                columnStatus = MyBase.Columns("Status")
                columnType = MyBase.Columns("Type")
                columnRequestDate = MyBase.Columns("RequestDate")
                columnDueDate = MyBase.Columns("DueDate")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Private Sub InitClass()
                columnAgentID = New Global.System.Data.DataColumn("AgentID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnAgentID)
                columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnTitle)
                columnFirstN = New Global.System.Data.DataColumn("FirstN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnFirstN)
                columnLastN = New Global.System.Data.DataColumn("LastN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnLastN)
                columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnEmail)
                columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnPhone)
                columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnFax)
                columnTroubleTicketNo = New Global.System.Data.DataColumn("TroubleTicketNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnTroubleTicketNo)
                columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnStatus)
                columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnType)
                columnRequestDate = New Global.System.Data.DataColumn("RequestDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnRequestDate)
                columnDueDate = New Global.System.Data.DataColumn("DueDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(columnDueDate)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {columnAgentID, columnTroubleTicketNo}, True))
                columnAgentID.AutoIncrement = True
                columnAgentID.AutoIncrementSeed = -1
                columnAgentID.AutoIncrementStep = -1
                columnAgentID.AllowDBNull = False
                columnAgentID.ReadOnly = True
                columnTitle.MaxLength = 50
                columnFirstN.MaxLength = 50
                columnLastN.MaxLength = 50
                columnEmail.MaxLength = 2147483647
                columnPhone.MaxLength = 10
                columnFax.MaxLength = 10
                columnTroubleTicketNo.AutoIncrement = True
                columnTroubleTicketNo.AutoIncrementSeed = -1
                columnTroubleTicketNo.AutoIncrementStep = -1
                columnTroubleTicketNo.AllowDBNull = False
                columnTroubleTicketNo.ReadOnly = True
                columnStatus.MaxLength = 10
                columnType.MaxLength = 10
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function NewrptAgentRow() As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow
                Return CType((Me.NewRow()), NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Function NewRowFromBuilder(builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowChanged(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                RaiseEvent rptAgentRowChangedEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowChanging(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                RaiseEvent rptAgentRowChangingEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowDeleted(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                RaiseEvent rptAgentRowDeletedEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Protected Overrides Sub OnRowDeleting(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                RaiseEvent rptAgentRowDeletingEvent(Me, New NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRowChangeEvent(CType(e.Row, NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub RemoverptAgentRow(row As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Shared Function GetTypedTableSchema(xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As NotificationSystem.NotificationSystem.Data.xsReports = New NotificationSystem.NotificationSystem.Data.xsReports()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "rptAgentDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(CStr(dsSchema.TargetNamespace)).GetEnumerator()

                        While schemas.MoveNext()
                            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If s1.Length = s2.Length Then
                                s1.Position = 0
                                s2.Position = 0
                                While (s1.Position <> s1.Length AndAlso (s1.ReadByte() = s2.ReadByte()))
                                End While
                                If s1.Position = s1.Length Then
                                    Return type
                                End If
                            End If
                        End While

                    Finally
                        If s1 IsNot Nothing Then
                            s1.Close()
                        End If
                        If s2 IsNot Nothing Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        ''' <summary>
        ''' Represents strongly named DataRow class.
        ''' </summary>
        Public Partial Class AgentRow
            Inherits Global.System.Data.DataRow

            Private tableAgent As NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Friend Sub New(rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                tableAgent = CType(Me.Table, NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property AgentID As Integer
                Get
                    Return CInt(Me(tableAgent.AgentIDColumn))
                End Get
                Set(value As Integer)
                    Me(tableAgent.AgentIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property TroubleTicketNo As Integer
                Get
                    Try
                        Return CInt(Me(tableAgent.TroubleTicketNoColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'TroubleTicketNo' in table 'Agent' is DBNull.", e)
                    End Try
                End Get
                Set(value As Integer)
                    Me(tableAgent.TroubleTicketNoColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Title As String
                Get
                    Try
                        Return CStr(Me(tableAgent.TitleColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Title' in table 'Agent' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableAgent.TitleColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property StartDate As Date
                Get
                    Try
                        Return CDate(Me(tableAgent.StartDateColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'StartDate' in table 'Agent' is DBNull.", e)
                    End Try
                End Get
                Set(value As Date)
                    Me(tableAgent.StartDateColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Salary As String
                Get
                    Try
                        Return CStr(Me(tableAgent.SalaryColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Salary' in table 'Agent' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableAgent.SalaryColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property FirstN As String
                Get
                    Try
                        Return CStr(Me(tableAgent.FirstNColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FirstN' in table 'Agent' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableAgent.FirstNColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property LastN As String
                Get
                    Try
                        Return CStr(Me(tableAgent.LastNColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LastN' in table 'Agent' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableAgent.LastNColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Email As String
                Get
                    Try
                        Return CStr(Me(tableAgent.EmailColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'Agent' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableAgent.EmailColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Phone As String
                Get
                    Try
                        Return CStr(Me(tableAgent.PhoneColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Phone' in table 'Agent' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableAgent.PhoneColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Fax As String
                Get
                    Try
                        Return CStr(Me(tableAgent.FaxColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Fax' in table 'Agent' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableAgent.FaxColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsTroubleTicketNoNull() As Boolean
                Return Me.IsNull(tableAgent.TroubleTicketNoColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetTroubleTicketNoNull()
                Me(tableAgent.TroubleTicketNoColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsTitleNull() As Boolean
                Return Me.IsNull(tableAgent.TitleColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetTitleNull()
                Me(tableAgent.TitleColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsStartDateNull() As Boolean
                Return Me.IsNull(tableAgent.StartDateColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetStartDateNull()
                Me(tableAgent.StartDateColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsSalaryNull() As Boolean
                Return Me.IsNull(tableAgent.SalaryColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetSalaryNull()
                Me(tableAgent.SalaryColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsFirstNNull() As Boolean
                Return Me.IsNull(tableAgent.FirstNColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetFirstNNull()
                Me(tableAgent.FirstNColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsLastNNull() As Boolean
                Return Me.IsNull(tableAgent.LastNColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetLastNNull()
                Me(tableAgent.LastNColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsEmailNull() As Boolean
                Return Me.IsNull(tableAgent.EmailColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetEmailNull()
                Me(tableAgent.EmailColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsPhoneNull() As Boolean
                Return Me.IsNull(tableAgent.PhoneColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetPhoneNull()
                Me(tableAgent.PhoneColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsFaxNull() As Boolean
                Return Me.IsNull(tableAgent.FaxColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetFaxNull()
                Me(tableAgent.FaxColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        ''' <summary>
        ''' Represents strongly named DataRow class.
        ''' </summary>
        Public Partial Class CustomerRow
            Inherits Global.System.Data.DataRow

            Private tableCustomer As NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Friend Sub New(rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                tableCustomer = CType(Me.Table, NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property CustomerID As Integer
                Get
                    Return CInt(Me(tableCustomer.CustomerIDColumn))
                End Get
                Set(value As Integer)
                    Me(tableCustomer.CustomerIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property AgentID As Integer
                Get
                    Return CInt(Me(tableCustomer.AgentIDColumn))
                End Get
                Set(value As Integer)
                    Me(tableCustomer.AgentIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property TroubleTicketNo As Integer
                Get
                    Return CInt(Me(tableCustomer.TroubleTicketNoColumn))
                End Get
                Set(value As Integer)
                    Me(tableCustomer.TroubleTicketNoColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property FirstN As String
                Get
                    Try
                        Return CStr(Me(tableCustomer.FirstNColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FirstN' in table 'Customer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableCustomer.FirstNColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property LastN As String
                Get
                    Try
                        Return CStr(Me(tableCustomer.LastNColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LastN' in table 'Customer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableCustomer.LastNColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Email As String
                Get
                    Try
                        Return CStr(Me(tableCustomer.EmailColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'Customer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableCustomer.EmailColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Phone As String
                Get
                    Try
                        Return CStr(Me(tableCustomer.PhoneColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Phone' in table 'Customer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableCustomer.PhoneColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Address As String
                Get
                    Try
                        Return CStr(Me(tableCustomer.AddressColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'Customer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableCustomer.AddressColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property City As String
                Get
                    Try
                        Return CStr(Me(tableCustomer.CityColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'Customer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableCustomer.CityColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property State As String
                Get
                    Try
                        Return CStr(Me(tableCustomer.StateColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'Customer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableCustomer.StateColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Zip As String
                Get
                    Try
                        Return CStr(Me(tableCustomer.ZipColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Zip' in table 'Customer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableCustomer.ZipColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property UserName As String
                Get
                    Try
                        Return CStr(Me(tableCustomer.UserNameColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'UserName' in table 'Customer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableCustomer.UserNameColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Password As String
                Get
                    Try
                        Return CStr(Me(tableCustomer.PasswordColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Password' in table 'Customer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableCustomer.PasswordColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsFirstNNull() As Boolean
                Return Me.IsNull(tableCustomer.FirstNColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetFirstNNull()
                Me(tableCustomer.FirstNColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsLastNNull() As Boolean
                Return Me.IsNull(tableCustomer.LastNColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetLastNNull()
                Me(tableCustomer.LastNColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsEmailNull() As Boolean
                Return Me.IsNull(tableCustomer.EmailColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetEmailNull()
                Me(tableCustomer.EmailColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsPhoneNull() As Boolean
                Return Me.IsNull(tableCustomer.PhoneColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetPhoneNull()
                Me(tableCustomer.PhoneColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsAddressNull() As Boolean
                Return Me.IsNull(tableCustomer.AddressColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetAddressNull()
                Me(tableCustomer.AddressColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsCityNull() As Boolean
                Return Me.IsNull(tableCustomer.CityColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetCityNull()
                Me(tableCustomer.CityColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsStateNull() As Boolean
                Return Me.IsNull(tableCustomer.StateColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetStateNull()
                Me(tableCustomer.StateColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsZipNull() As Boolean
                Return Me.IsNull(tableCustomer.ZipColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetZipNull()
                Me(tableCustomer.ZipColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsUserNameNull() As Boolean
                Return Me.IsNull(tableCustomer.UserNameColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetUserNameNull()
                Me(tableCustomer.UserNameColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsPasswordNull() As Boolean
                Return Me.IsNull(tableCustomer.PasswordColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetPasswordNull()
                Me(tableCustomer.PasswordColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        ''' <summary>
        ''' Represents strongly named DataRow class.
        ''' </summary>
        Public Partial Class TroubleTicketReqRow
            Inherits Global.System.Data.DataRow

            Private tableTroubleTicketReq As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Friend Sub New(rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                tableTroubleTicketReq = CType(Me.Table, NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property AgentID As Integer
                Get
                    Try
                        Return CInt(Me(tableTroubleTicketReq.AgentIDColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'AgentID' in table 'TroubleTicketReq' is DBNull.", e)
                    End Try
                End Get
                Set(value As Integer)
                    Me(tableTroubleTicketReq.AgentIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property CustomerID As Integer
                Get
                    Try
                        Return CInt(Me(tableTroubleTicketReq.CustomerIDColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerID' in table 'TroubleTicketReq' is DBNull.", e)
                    End Try
                End Get
                Set(value As Integer)
                    Me(tableTroubleTicketReq.CustomerIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property TroubleTicketNo As Integer
                Get
                    Return CInt(Me(tableTroubleTicketReq.TroubleTicketNoColumn))
                End Get
                Set(value As Integer)
                    Me(tableTroubleTicketReq.TroubleTicketNoColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Status As String
                Get
                    Try
                        Return CStr(Me(tableTroubleTicketReq.StatusColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'TroubleTicketReq' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableTroubleTicketReq.StatusColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Type As String
                Get
                    Try
                        Return CStr(Me(tableTroubleTicketReq.TypeColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'TroubleTicketReq' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tableTroubleTicketReq.TypeColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property DueDate As Date
                Get
                    Try
                        Return CDate(Me(tableTroubleTicketReq.DueDateColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'DueDate' in table 'TroubleTicketReq' is DBNull.", e)
                    End Try
                End Get
                Set(value As Date)
                    Me(tableTroubleTicketReq.DueDateColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property RequestDate As Date
                Get
                    Try
                        Return CDate(Me(tableTroubleTicketReq.RequestDateColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'RequestDate' in table 'TroubleTicketReq' is DBNull.", e)
                    End Try
                End Get
                Set(value As Date)
                    Me(tableTroubleTicketReq.RequestDateColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsAgentIDNull() As Boolean
                Return Me.IsNull(tableTroubleTicketReq.AgentIDColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetAgentIDNull()
                Me(tableTroubleTicketReq.AgentIDColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsCustomerIDNull() As Boolean
                Return Me.IsNull(tableTroubleTicketReq.CustomerIDColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetCustomerIDNull()
                Me(tableTroubleTicketReq.CustomerIDColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsStatusNull() As Boolean
                Return Me.IsNull(tableTroubleTicketReq.StatusColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetStatusNull()
                Me(tableTroubleTicketReq.StatusColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsTypeNull() As Boolean
                Return Me.IsNull(tableTroubleTicketReq.TypeColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetTypeNull()
                Me(tableTroubleTicketReq.TypeColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsDueDateNull() As Boolean
                Return Me.IsNull(tableTroubleTicketReq.DueDateColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetDueDateNull()
                Me(tableTroubleTicketReq.DueDateColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsRequestDateNull() As Boolean
                Return Me.IsNull(tableTroubleTicketReq.RequestDateColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetRequestDateNull()
                Me(tableTroubleTicketReq.RequestDateColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        ''' <summary>
        ''' Represents strongly named DataRow class.
        ''' </summary>
        Public Partial Class rptCustomerRow
            Inherits Global.System.Data.DataRow

            Private tablerptCustomer As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Friend Sub New(rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                tablerptCustomer = CType(Me.Table, NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property CustomerID As Integer
                Get
                    Return CInt(Me(tablerptCustomer.CustomerIDColumn))
                End Get
                Set(value As Integer)
                    Me(tablerptCustomer.CustomerIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property FirstN As String
                Get
                    Try
                        Return CStr(Me(tablerptCustomer.FirstNColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FirstN' in table 'rptCustomer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptCustomer.FirstNColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property LastN As String
                Get
                    Try
                        Return CStr(Me(tablerptCustomer.LastNColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LastN' in table 'rptCustomer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptCustomer.LastNColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Email As String
                Get
                    Try
                        Return CStr(Me(tablerptCustomer.EmailColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'rptCustomer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptCustomer.EmailColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Phone As String
                Get
                    Try
                        Return CStr(Me(tablerptCustomer.PhoneColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Phone' in table 'rptCustomer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptCustomer.PhoneColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Address As String
                Get
                    Try
                        Return CStr(Me(tablerptCustomer.AddressColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'rptCustomer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptCustomer.AddressColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property City As String
                Get
                    Try
                        Return CStr(Me(tablerptCustomer.CityColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'rptCustomer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptCustomer.CityColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property State As String
                Get
                    Try
                        Return CStr(Me(tablerptCustomer.StateColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'rptCustomer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptCustomer.StateColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Zip As String
                Get
                    Try
                        Return CStr(Me(tablerptCustomer.ZipColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Zip' in table 'rptCustomer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptCustomer.ZipColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property TroubleTicketNo As Integer
                Get
                    Return CInt(Me(tablerptCustomer.TroubleTicketNoColumn))
                End Get
                Set(value As Integer)
                    Me(tablerptCustomer.TroubleTicketNoColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Status As String
                Get
                    Try
                        Return CStr(Me(tablerptCustomer.StatusColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'rptCustomer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptCustomer.StatusColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Type As String
                Get
                    Try
                        Return CStr(Me(tablerptCustomer.TypeColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'rptCustomer' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptCustomer.TypeColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property RequestDate As Date
                Get
                    Try
                        Return CDate(Me(tablerptCustomer.RequestDateColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'RequestDate' in table 'rptCustomer' is DBNull.", e)
                    End Try
                End Get
                Set(value As Date)
                    Me(tablerptCustomer.RequestDateColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property DueDate As Date
                Get
                    Try
                        Return CDate(Me(tablerptCustomer.DueDateColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'DueDate' in table 'rptCustomer' is DBNull.", e)
                    End Try
                End Get
                Set(value As Date)
                    Me(tablerptCustomer.DueDateColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsFirstNNull() As Boolean
                Return Me.IsNull(tablerptCustomer.FirstNColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetFirstNNull()
                Me(tablerptCustomer.FirstNColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsLastNNull() As Boolean
                Return Me.IsNull(tablerptCustomer.LastNColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetLastNNull()
                Me(tablerptCustomer.LastNColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsEmailNull() As Boolean
                Return Me.IsNull(tablerptCustomer.EmailColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetEmailNull()
                Me(tablerptCustomer.EmailColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsPhoneNull() As Boolean
                Return Me.IsNull(tablerptCustomer.PhoneColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetPhoneNull()
                Me(tablerptCustomer.PhoneColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsAddressNull() As Boolean
                Return Me.IsNull(tablerptCustomer.AddressColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetAddressNull()
                Me(tablerptCustomer.AddressColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsCityNull() As Boolean
                Return Me.IsNull(tablerptCustomer.CityColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetCityNull()
                Me(tablerptCustomer.CityColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsStateNull() As Boolean
                Return Me.IsNull(tablerptCustomer.StateColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetStateNull()
                Me(tablerptCustomer.StateColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsZipNull() As Boolean
                Return Me.IsNull(tablerptCustomer.ZipColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetZipNull()
                Me(tablerptCustomer.ZipColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsStatusNull() As Boolean
                Return Me.IsNull(tablerptCustomer.StatusColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetStatusNull()
                Me(tablerptCustomer.StatusColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsTypeNull() As Boolean
                Return Me.IsNull(tablerptCustomer.TypeColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetTypeNull()
                Me(tablerptCustomer.TypeColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsRequestDateNull() As Boolean
                Return Me.IsNull(tablerptCustomer.RequestDateColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetRequestDateNull()
                Me(tablerptCustomer.RequestDateColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsDueDateNull() As Boolean
                Return Me.IsNull(tablerptCustomer.DueDateColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetDueDateNull()
                Me(tablerptCustomer.DueDateColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        ''' <summary>
        ''' Represents strongly named DataRow class.
        ''' </summary>
        Public Partial Class rptAgentRow
            Inherits Global.System.Data.DataRow

            Private tablerptAgent As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Friend Sub New(rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                tablerptAgent = CType(Me.Table, NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property AgentID As Integer
                Get
                    Return CInt(Me(tablerptAgent.AgentIDColumn))
                End Get
                Set(value As Integer)
                    Me(tablerptAgent.AgentIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Title As String
                Get
                    Try
                        Return CStr(Me(tablerptAgent.TitleColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Title' in table 'rptAgent' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptAgent.TitleColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property FirstN As String
                Get
                    Try
                        Return CStr(Me(tablerptAgent.FirstNColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FirstN' in table 'rptAgent' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptAgent.FirstNColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property LastN As String
                Get
                    Try
                        Return CStr(Me(tablerptAgent.LastNColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LastN' in table 'rptAgent' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptAgent.LastNColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Email As String
                Get
                    Try
                        Return CStr(Me(tablerptAgent.EmailColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'rptAgent' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptAgent.EmailColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Phone As String
                Get
                    Try
                        Return CStr(Me(tablerptAgent.PhoneColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Phone' in table 'rptAgent' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptAgent.PhoneColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Fax As String
                Get
                    Try
                        Return CStr(Me(tablerptAgent.FaxColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Fax' in table 'rptAgent' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptAgent.FaxColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property TroubleTicketNo As Integer
                Get
                    Return CInt(Me(tablerptAgent.TroubleTicketNoColumn))
                End Get
                Set(value As Integer)
                    Me(tablerptAgent.TroubleTicketNoColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Status As String
                Get
                    Try
                        Return CStr(Me(tablerptAgent.StatusColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'rptAgent' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptAgent.StatusColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property Type As String
                Get
                    Try
                        Return CStr(Me(tablerptAgent.TypeColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'rptAgent' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(tablerptAgent.TypeColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property RequestDate As Date
                Get
                    Try
                        Return CDate(Me(tablerptAgent.RequestDateColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'RequestDate' in table 'rptAgent' is DBNull.", e)
                    End Try
                End Get
                Set(value As Date)
                    Me(tablerptAgent.RequestDateColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Property DueDate As Date
                Get
                    Try
                        Return CDate(Me(tablerptAgent.DueDateColumn))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'DueDate' in table 'rptAgent' is DBNull.", e)
                    End Try
                End Get
                Set(value As Date)
                    Me(tablerptAgent.DueDateColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsTitleNull() As Boolean
                Return Me.IsNull(tablerptAgent.TitleColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetTitleNull()
                Me(tablerptAgent.TitleColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsFirstNNull() As Boolean
                Return Me.IsNull(tablerptAgent.FirstNColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetFirstNNull()
                Me(tablerptAgent.FirstNColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsLastNNull() As Boolean
                Return Me.IsNull(tablerptAgent.LastNColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetLastNNull()
                Me(tablerptAgent.LastNColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsEmailNull() As Boolean
                Return Me.IsNull(tablerptAgent.EmailColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetEmailNull()
                Me(tablerptAgent.EmailColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsPhoneNull() As Boolean
                Return Me.IsNull(tablerptAgent.PhoneColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetPhoneNull()
                Me(tablerptAgent.PhoneColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsFaxNull() As Boolean
                Return Me.IsNull(tablerptAgent.FaxColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetFaxNull()
                Me(tablerptAgent.FaxColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsStatusNull() As Boolean
                Return Me.IsNull(tablerptAgent.StatusColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetStatusNull()
                Me(tablerptAgent.StatusColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsTypeNull() As Boolean
                Return Me.IsNull(tablerptAgent.TypeColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetTypeNull()
                Me(tablerptAgent.TypeColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsRequestDateNull() As Boolean
                Return Me.IsNull(tablerptAgent.RequestDateColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetRequestDateNull()
                Me(tablerptAgent.RequestDateColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function IsDueDateNull() As Boolean
                Return Me.IsNull(tablerptAgent.DueDateColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub SetDueDateNull()
                Me(tablerptAgent.DueDateColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        ''' <summary>
        ''' Row event argument class
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Class AgentRowChangeEvent
            Inherits Global.System.EventArgs

            Private eventRow As NotificationSystem.NotificationSystem.Data.xsReports.AgentRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub New(row As NotificationSystem.NotificationSystem.Data.xsReports.AgentRow, action As Global.System.Data.DataRowAction)
                eventRow = row
                eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property Row As NotificationSystem.NotificationSystem.Data.xsReports.AgentRow
                Get
                    Return eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property Action As Global.System.Data.DataRowAction
                Get
                    Return eventAction
                End Get
            End Property
        End Class

        ''' <summary>
        ''' Row event argument class
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Class CustomerRowChangeEvent
            Inherits Global.System.EventArgs

            Private eventRow As NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub New(row As NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow, action As Global.System.Data.DataRowAction)
                eventRow = row
                eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property Row As NotificationSystem.NotificationSystem.Data.xsReports.CustomerRow
                Get
                    Return eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property Action As Global.System.Data.DataRowAction
                Get
                    Return eventAction
                End Get
            End Property
        End Class

        ''' <summary>
        ''' Row event argument class
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Class TroubleTicketReqRowChangeEvent
            Inherits Global.System.EventArgs

            Private eventRow As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub New(row As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow, action As Global.System.Data.DataRowAction)
                eventRow = row
                eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property Row As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqRow
                Get
                    Return eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property Action As Global.System.Data.DataRowAction
                Get
                    Return eventAction
                End Get
            End Property
        End Class

        ''' <summary>
        ''' Row event argument class
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Class rptCustomerRowChangeEvent
            Inherits Global.System.EventArgs

            Private eventRow As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub New(row As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow, action As Global.System.Data.DataRowAction)
                eventRow = row
                eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property Row As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerRow
                Get
                    Return eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property Action As Global.System.Data.DataRowAction
                Get
                    Return eventAction
                End Get
            End Property
        End Class

        ''' <summary>
        ''' Row event argument class
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Class rptAgentRowChangeEvent
            Inherits Global.System.EventArgs

            Private eventRow As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Sub New(row As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow, action As Global.System.Data.DataRowAction)
                eventRow = row
                eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property Row As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentRow
                Get
                    Return eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public ReadOnly Property Action As Global.System.Data.DataRowAction
                Get
                    Return eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace

Namespace NotificationSystem.NotificationSystem.Data.xsReportsTableAdapters


    ''' <summary>
    ''' Represents the connection and commands used to retrieve and save data.
    ''' </summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code")>
    <Global.System.ComponentModel.ToolboxItemAttribute(True)>
    <Global.System.ComponentModel.DataObjectAttribute(True)>
    <Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")>
    <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Partial Class AgentTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection As Global.System.Data.SqlClient.SqlCommand()

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Sub New()
            ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected Friend ReadOnly Property Adapter As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If _adapter Is Nothing Then
                    InitAdapter()
                End If
                Return _adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Friend Property Connection As Global.System.Data.SqlClient.SqlConnection
            Get
                If _connection Is Nothing Then
                    InitConnection()
                End If
                Return _connection
            End Get
            Set(value As Global.System.Data.SqlClient.SqlConnection)
                _connection = value
                If Adapter.InsertCommand IsNot Nothing Then
                    Adapter.InsertCommand.Connection = value
                End If
                If Adapter.DeleteCommand IsNot Nothing Then
                    Adapter.DeleteCommand.Connection = value
                End If
                If Adapter.UpdateCommand IsNot Nothing Then
                    Adapter.UpdateCommand.Connection = value
                End If
                Dim i = 0

                While i < CommandCollection.Length
                    If CommandCollection(i) IsNot Nothing Then
                        CType(CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If

                    i = i + 1
                End While
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Friend Property Transaction As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(value As Global.System.Data.SqlClient.SqlTransaction)
                _transaction = value
                Dim i = 0

                While i < CommandCollection.Length
                    CommandCollection(i).Transaction = _transaction
                    i = i + 1
                End While
                If Adapter IsNot Nothing AndAlso Adapter.DeleteCommand IsNot Nothing Then
                    Adapter.DeleteCommand.Transaction = _transaction
                End If
                If Adapter IsNot Nothing AndAlso Adapter.InsertCommand IsNot Nothing Then
                    Adapter.InsertCommand.Transaction = _transaction
                End If
                If Adapter IsNot Nothing AndAlso Adapter.UpdateCommand IsNot Nothing Then
                    Adapter.UpdateCommand.Transaction = _transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected ReadOnly Property CommandCollection As Global.System.Data.SqlClient.SqlCommand()
            Get
                If _commandCollection Is Nothing Then
                    InitCommandCollection()
                End If
                Return _commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Property ClearBeforeFill As Boolean
            Get
                Return _clearBeforeFill
            End Get
            Set(value As Boolean)
                _clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Sub InitAdapter()
            _adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Agent"
            tableMapping.ColumnMappings.Add("AgentID", "AgentID")
            tableMapping.ColumnMappings.Add("TroubleTicketNo", "TroubleTicketNo")
            tableMapping.ColumnMappings.Add("Title", "Title")
            tableMapping.ColumnMappings.Add("StartDate", "StartDate")
            tableMapping.ColumnMappings.Add("Salary", "Salary")
            tableMapping.ColumnMappings.Add("FirstN", "FirstN")
            tableMapping.ColumnMappings.Add("LastN", "LastN")
            tableMapping.ColumnMappings.Add("Email", "Email")
            tableMapping.ColumnMappings.Add("Phone", "Phone")
            tableMapping.ColumnMappings.Add("Fax", "Fax")
            _adapter.TableMappings.Add(tableMapping)
            _adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            _adapter.DeleteCommand.Connection = Connection
            _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Agent] WHERE (([AgentID] = @Original_AgentID))"
            _adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            _adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AgentID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AgentID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            _adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            _adapter.InsertCommand.Connection = Connection
            _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Agent] ([TroubleTicketNo], [Title], [StartDate], [Salary], [Fi" & "rstN], [LastN], [Email], [Phone], [Fax]) VALUES (@TroubleTicketNo, @Title, @Star" & "tDate, @Salary, @FirstN, @LastN, @Email, @Phone, @Fax)"
            _adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TroubleTicketNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TroubleTicketNo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Title", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Title", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.Date, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Salary", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Salary", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstN", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastN", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Email", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Email", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fax", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fax", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            _adapter.UpdateCommand.Connection = Connection
            _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Agent] SET [TroubleTicketNo] = @TroubleTicketNo, [Title] = @Title, " & "[StartDate] = @StartDate, [Salary] = @Salary, [FirstN] = @FirstN, [LastN] = @Las" & "tN, [Email] = @Email, [Phone] = @Phone, [Fax] = @Fax WHERE (([AgentID] = @Origin" & "al_AgentID))"
            _adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TroubleTicketNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TroubleTicketNo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Title", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Title", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.Date, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Salary", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Salary", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstN", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastN", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Email", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Email", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fax", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fax", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AgentID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AgentID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Sub InitConnection()
            _connection = New Global.System.Data.SqlClient.SqlConnection()
            _connection.ConnectionString = Configuration.ConfigurationManager.ConnectionStrings("NotificationSystemConnectionString1").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Sub InitCommandCollection()
            _commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            _commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            _commandCollection(0).Connection = Connection
            _commandCollection(0).CommandText = "SELECT AgentID, TroubleTicketNo, Title, StartDate, Salary, FirstN, LastN, Email, " & "Phone, Fax FROM dbo.Agent"
            _commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            _commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            _commandCollection(1).Connection = Connection
            _commandCollection(1).CommandText = "SELECT AgentID, TroubleTicketNo, Title, StartDate, Salary, FirstN, LastN, Email, " & "Phone, Fax FROM dbo.Agent" & vbCrLf & "WHERE AgentID = @AgentID"
            _commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            _commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AgentID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "AgentID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            _commandCollection(2).Connection = Connection
            _commandCollection(2).CommandText = "SELECT AgentID, TroubleTicketNo, Title, StartDate, Salary, FirstN, LastN, Email, " & "Phone, Fax FROM dbo.Agent" & vbCrLf & "WHERE TroubleTicketNo = @TroubleTicketNo"
            _commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            _commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TroubleTicketNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TroubleTicketNo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
        Public Overridable Function Fill(dataTable As NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable) As Integer
            Adapter.SelectCommand = CommandCollection(0)
            If ClearBeforeFill = True Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)>
        Public Overridable Function GetData() As NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable
            Adapter.SelectCommand = CommandCollection(0)
            Dim dataTable As NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable = New NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable()
            Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)>
        Public Overridable Function FillByAgentID(dataTable As NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable, AgentID As Integer) As Integer
            Adapter.SelectCommand = CommandCollection(1)
            Adapter.SelectCommand.Parameters(0).Value = AgentID
            If ClearBeforeFill = True Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, False)>
        Public Overridable Function GetDataByAgentID(AgentID As Integer) As NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable
            Adapter.SelectCommand = CommandCollection(1)
            Adapter.SelectCommand.Parameters(0).Value = AgentID
            Dim dataTable As NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable = New NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable()
            Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)>
        Public Overridable Function FillByTicketNo(dataTable As NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable, TroubleTicketNo As Global.System.Nullable(Of Integer)) As Integer
            Adapter.SelectCommand = CommandCollection(2)
            If TroubleTicketNo.HasValue = True Then
                Adapter.SelectCommand.Parameters(0).Value = CInt(TroubleTicketNo.Value)
            Else
                Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If ClearBeforeFill = True Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, False)>
        Public Overridable Function GetDataByTicketNo(TroubleTicketNo As Global.System.Nullable(Of Integer)) As NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable
            Adapter.SelectCommand = CommandCollection(2)
            If TroubleTicketNo.HasValue = True Then
                Adapter.SelectCommand.Parameters(0).Value = CInt(TroubleTicketNo.Value)
            Else
                Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable = New NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable()
            Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(dataTable As NotificationSystem.NotificationSystem.Data.xsReports.AgentDataTable) As Integer
            Return Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(dataSet As NotificationSystem.NotificationSystem.Data.xsReports) As Integer
            Return Adapter.Update(dataSet, "Agent")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(dataRow As Global.System.Data.DataRow) As Integer
            Return Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(dataRows As Global.System.Data.DataRow()) As Integer
            Return Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
        Public Overridable Function Delete(Original_AgentID As Integer) As Integer
            Adapter.DeleteCommand.Parameters(0).Value = Original_AgentID
            Dim previousConnectionState As Global.System.Data.ConnectionState = Adapter.DeleteCommand.Connection.State
            If (Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open Then
                Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Adapter.DeleteCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If previousConnectionState = Global.System.Data.ConnectionState.Closed Then
                    Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
        Public Overridable Function Insert(TroubleTicketNo As Global.System.Nullable(Of Integer), Title As String, StartDate As Global.System.Nullable(Of Global.System.DateTime), Salary As String, FirstN As String, LastN As String, Email As String, Phone As String, Fax As String) As Integer
            If TroubleTicketNo.HasValue = True Then
                Adapter.InsertCommand.Parameters(0).Value = CInt(TroubleTicketNo.Value)
            Else
                Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If Equals(Title, Nothing) Then
                Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(1).Value = Title
            End If
            If StartDate.HasValue = True Then
                Adapter.InsertCommand.Parameters(2).Value = CDate(StartDate.Value)
            Else
                Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If Equals(Salary, Nothing) Then
                Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(3).Value = Salary
            End If
            If Equals(FirstN, Nothing) Then
                Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(4).Value = FirstN
            End If
            If Equals(LastN, Nothing) Then
                Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(5).Value = LastN
            End If
            If Equals(Email, Nothing) Then
                Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(6).Value = Email
            End If
            If Equals(Phone, Nothing) Then
                Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(7).Value = Phone
            End If
            If Equals(Fax, Nothing) Then
                Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(8).Value = Fax
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Adapter.InsertCommand.Connection.State
            If (Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open Then
                Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Adapter.InsertCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If previousConnectionState = Global.System.Data.ConnectionState.Closed Then
                    Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
        Public Overridable Function Update(TroubleTicketNo As Global.System.Nullable(Of Integer), Title As String, StartDate As Global.System.Nullable(Of Global.System.DateTime), Salary As String, FirstN As String, LastN As String, Email As String, Phone As String, Fax As String, Original_AgentID As Integer) As Integer
            If TroubleTicketNo.HasValue = True Then
                Adapter.UpdateCommand.Parameters(0).Value = CInt(TroubleTicketNo.Value)
            Else
                Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If Equals(Title, Nothing) Then
                Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(1).Value = Title
            End If
            If StartDate.HasValue = True Then
                Adapter.UpdateCommand.Parameters(2).Value = CDate(StartDate.Value)
            Else
                Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If Equals(Salary, Nothing) Then
                Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(3).Value = Salary
            End If
            If Equals(FirstN, Nothing) Then
                Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(4).Value = FirstN
            End If
            If Equals(LastN, Nothing) Then
                Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(5).Value = LastN
            End If
            If Equals(Email, Nothing) Then
                Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(6).Value = Email
            End If
            If Equals(Phone, Nothing) Then
                Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(7).Value = Phone
            End If
            If Equals(Fax, Nothing) Then
                Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(8).Value = Fax
            End If
            Adapter.UpdateCommand.Parameters(9).Value = Original_AgentID
            Dim previousConnectionState As Global.System.Data.ConnectionState = Adapter.UpdateCommand.Connection.State
            If (Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open Then
                Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Adapter.UpdateCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If previousConnectionState = Global.System.Data.ConnectionState.Closed Then
                    Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    ''' <summary>
    ''' Represents the connection and commands used to retrieve and save data.
    ''' </summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code")>
    <Global.System.ComponentModel.ToolboxItemAttribute(True)>
    <Global.System.ComponentModel.DataObjectAttribute(True)>
    <Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")>
    <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Partial Class CustomerTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection As Global.System.Data.SqlClient.SqlCommand()

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Sub New()
            ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected Friend ReadOnly Property Adapter As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If _adapter Is Nothing Then
                    InitAdapter()
                End If
                Return _adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Friend Property Connection As Global.System.Data.SqlClient.SqlConnection
            Get
                If _connection Is Nothing Then
                    InitConnection()
                End If
                Return _connection
            End Get
            Set(value As Global.System.Data.SqlClient.SqlConnection)
                _connection = value
                If Adapter.InsertCommand IsNot Nothing Then
                    Adapter.InsertCommand.Connection = value
                End If
                If Adapter.DeleteCommand IsNot Nothing Then
                    Adapter.DeleteCommand.Connection = value
                End If
                If Adapter.UpdateCommand IsNot Nothing Then
                    Adapter.UpdateCommand.Connection = value
                End If
                Dim i = 0

                While i < CommandCollection.Length
                    If CommandCollection(i) IsNot Nothing Then
                        CType(CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If

                    i = i + 1
                End While
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Friend Property Transaction As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(value As Global.System.Data.SqlClient.SqlTransaction)
                _transaction = value
                Dim i = 0

                While i < CommandCollection.Length
                    CommandCollection(i).Transaction = _transaction
                    i = i + 1
                End While
                If Adapter IsNot Nothing AndAlso Adapter.DeleteCommand IsNot Nothing Then
                    Adapter.DeleteCommand.Transaction = _transaction
                End If
                If Adapter IsNot Nothing AndAlso Adapter.InsertCommand IsNot Nothing Then
                    Adapter.InsertCommand.Transaction = _transaction
                End If
                If Adapter IsNot Nothing AndAlso Adapter.UpdateCommand IsNot Nothing Then
                    Adapter.UpdateCommand.Transaction = _transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected ReadOnly Property CommandCollection As Global.System.Data.SqlClient.SqlCommand()
            Get
                If _commandCollection Is Nothing Then
                    InitCommandCollection()
                End If
                Return _commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Property ClearBeforeFill As Boolean
            Get
                Return _clearBeforeFill
            End Get
            Set(value As Boolean)
                _clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Sub InitAdapter()
            _adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Customer"
            tableMapping.ColumnMappings.Add("CustomerID", "CustomerID")
            tableMapping.ColumnMappings.Add("AgentID", "AgentID")
            tableMapping.ColumnMappings.Add("TroubleTicketNo", "TroubleTicketNo")
            tableMapping.ColumnMappings.Add("FirstN", "FirstN")
            tableMapping.ColumnMappings.Add("LastN", "LastN")
            tableMapping.ColumnMappings.Add("Email", "Email")
            tableMapping.ColumnMappings.Add("Phone", "Phone")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("UserName", "UserName")
            tableMapping.ColumnMappings.Add("Password", "Password")
            _adapter.TableMappings.Add(tableMapping)
            _adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            _adapter.DeleteCommand.Connection = Connection
            _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Customer] WHERE (([CustomerID] = @Original_CustomerID))"
            _adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            _adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomerID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            _adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            _adapter.InsertCommand.Connection = Connection
            _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Customer] ([AgentID], [TroubleTicketNo], [FirstN], [LastN], [Email], [Phone], [Address], [City], [State], [Zip], [UserName], [Password]) VALUES (@AgentID, @TroubleTicketNo, @FirstN, @LastN, @Email, @Phone, @Address, @City, @State, @Zip, @UserName, @Password)"
            _adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AgentID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AgentID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TroubleTicketNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TroubleTicketNo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstN", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastN", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Email", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Email", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@City", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "City", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@State", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "State", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Zip", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zip", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserName", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Password", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            _adapter.UpdateCommand.Connection = Connection
            _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Customer] SET [AgentID] = @AgentID, [TroubleTicketNo] = @TroubleTicketNo, [FirstN] = @FirstN, [LastN] = @LastN, [Email] = @Email, [Phone] = @Phone, [Address] = @Address, [City] = @City, [State] = @State, [Zip] = @Zip, [UserName] = @UserName, [Password] = @Password WHERE (([CustomerID] = @Original_CustomerID))"
            _adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AgentID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AgentID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TroubleTicketNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TroubleTicketNo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstN", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastN", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Email", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Email", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@City", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "City", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@State", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "State", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Zip", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zip", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserName", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Password", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomerID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Sub InitConnection()
            _connection = New Global.System.Data.SqlClient.SqlConnection()
            _connection.ConnectionString = Configuration.ConfigurationManager.ConnectionStrings("NotificationSystemConnectionString1").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Sub InitCommandCollection()
            _commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            _commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            _commandCollection(0).Connection = Connection
            _commandCollection(0).CommandText = "SELECT CustomerID, AgentID, TroubleTicketNo, FirstN, LastN, Email, Phone, Address" & ", City, State, Zip, UserName, Password FROM dbo.Customer"
            _commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            _commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            _commandCollection(1).Connection = Connection
            _commandCollection(1).CommandText = "SELECT CustomerID, AgentID, TroubleTicketNo, FirstN, LastN, Email, Phone, Address" & ", City, State, Zip, UserName, Password FROM dbo.Customer" & vbCrLf & "WHERE CustomerID = @Cu" & "stomerID"
            _commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            _commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
        Public Overridable Function Fill(dataTable As NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable) As Integer
            Adapter.SelectCommand = CommandCollection(0)
            If ClearBeforeFill = True Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)>
        Public Overridable Function GetData() As NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable
            Adapter.SelectCommand = CommandCollection(0)
            Dim dataTable As NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable = New NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable()
            Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)>
        Public Overridable Function FillByCustomerID(dataTable As NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable, CustomerID As Integer) As Integer
            Adapter.SelectCommand = CommandCollection(1)
            Adapter.SelectCommand.Parameters(0).Value = CustomerID
            If ClearBeforeFill = True Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, False)>
        Public Overridable Function GetDataByCustomerID(CustomerID As Integer) As NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable
            Adapter.SelectCommand = CommandCollection(1)
            Adapter.SelectCommand.Parameters(0).Value = CustomerID
            Dim dataTable As NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable = New NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable()
            Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(dataTable As NotificationSystem.NotificationSystem.Data.xsReports.CustomerDataTable) As Integer
            Return Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(dataSet As NotificationSystem.NotificationSystem.Data.xsReports) As Integer
            Return Adapter.Update(dataSet, "Customer")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(dataRow As Global.System.Data.DataRow) As Integer
            Return Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(dataRows As Global.System.Data.DataRow()) As Integer
            Return Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
        Public Overridable Function Delete(Original_CustomerID As Integer) As Integer
            Adapter.DeleteCommand.Parameters(0).Value = Original_CustomerID
            Dim previousConnectionState As Global.System.Data.ConnectionState = Adapter.DeleteCommand.Connection.State
            If (Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open Then
                Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Adapter.DeleteCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If previousConnectionState = Global.System.Data.ConnectionState.Closed Then
                    Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
        Public Overridable Function Insert(AgentID As Integer, TroubleTicketNo As Integer, FirstN As String, LastN As String, Email As String, Phone As String, Address As String, City As String, State As String, Zip As String, UserName As String, Password As String) As Integer
            Adapter.InsertCommand.Parameters(0).Value = AgentID
            Adapter.InsertCommand.Parameters(1).Value = TroubleTicketNo
            If Equals(FirstN, Nothing) Then
                Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(2).Value = FirstN
            End If
            If Equals(LastN, Nothing) Then
                Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(3).Value = LastN
            End If
            If Equals(Email, Nothing) Then
                Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(4).Value = Email
            End If
            If Equals(Phone, Nothing) Then
                Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(5).Value = Phone
            End If
            If Equals(Address, Nothing) Then
                Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(6).Value = Address
            End If
            If Equals(City, Nothing) Then
                Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(7).Value = City
            End If
            If Equals(State, Nothing) Then
                Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(8).Value = State
            End If
            If Equals(Zip, Nothing) Then
                Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(9).Value = Zip
            End If
            If Equals(UserName, Nothing) Then
                Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(10).Value = UserName
            End If
            If Equals(Password, Nothing) Then
                Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(11).Value = Password
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Adapter.InsertCommand.Connection.State
            If (Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open Then
                Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Adapter.InsertCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If previousConnectionState = Global.System.Data.ConnectionState.Closed Then
                    Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
        Public Overridable Function Update(AgentID As Integer, TroubleTicketNo As Integer, FirstN As String, LastN As String, Email As String, Phone As String, Address As String, City As String, State As String, Zip As String, UserName As String, Password As String, Original_CustomerID As Integer) As Integer
            Adapter.UpdateCommand.Parameters(0).Value = AgentID
            Adapter.UpdateCommand.Parameters(1).Value = TroubleTicketNo
            If Equals(FirstN, Nothing) Then
                Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(2).Value = FirstN
            End If
            If Equals(LastN, Nothing) Then
                Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(3).Value = LastN
            End If
            If Equals(Email, Nothing) Then
                Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(4).Value = Email
            End If
            If Equals(Phone, Nothing) Then
                Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(5).Value = Phone
            End If
            If Equals(Address, Nothing) Then
                Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(6).Value = Address
            End If
            If Equals(City, Nothing) Then
                Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(7).Value = City
            End If
            If Equals(State, Nothing) Then
                Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(8).Value = State
            End If
            If Equals(Zip, Nothing) Then
                Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(9).Value = Zip
            End If
            If Equals(UserName, Nothing) Then
                Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(10).Value = UserName
            End If
            If Equals(Password, Nothing) Then
                Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(11).Value = Password
            End If
            Adapter.UpdateCommand.Parameters(12).Value = Original_CustomerID
            Dim previousConnectionState As Global.System.Data.ConnectionState = Adapter.UpdateCommand.Connection.State
            If (Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open Then
                Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Adapter.UpdateCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If previousConnectionState = Global.System.Data.ConnectionState.Closed Then
                    Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    ''' <summary>
    ''' Represents the connection and commands used to retrieve and save data.
    ''' </summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code")>
    <Global.System.ComponentModel.ToolboxItemAttribute(True)>
    <Global.System.ComponentModel.DataObjectAttribute(True)>
    <Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")>
    <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Partial Class TroubleTicketReqTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection As Global.System.Data.SqlClient.SqlCommand()

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Sub New()
            ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected Friend ReadOnly Property Adapter As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If _adapter Is Nothing Then
                    InitAdapter()
                End If
                Return _adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Friend Property Connection As Global.System.Data.SqlClient.SqlConnection
            Get
                If _connection Is Nothing Then
                    InitConnection()
                End If
                Return _connection
            End Get
            Set(value As Global.System.Data.SqlClient.SqlConnection)
                _connection = value
                If Adapter.InsertCommand IsNot Nothing Then
                    Adapter.InsertCommand.Connection = value
                End If
                If Adapter.DeleteCommand IsNot Nothing Then
                    Adapter.DeleteCommand.Connection = value
                End If
                If Adapter.UpdateCommand IsNot Nothing Then
                    Adapter.UpdateCommand.Connection = value
                End If
                Dim i = 0

                While i < CommandCollection.Length
                    If CommandCollection(i) IsNot Nothing Then
                        CType(CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If

                    i = i + 1
                End While
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Friend Property Transaction As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(value As Global.System.Data.SqlClient.SqlTransaction)
                _transaction = value
                Dim i = 0

                While i < CommandCollection.Length
                    CommandCollection(i).Transaction = _transaction
                    i = i + 1
                End While
                If Adapter IsNot Nothing AndAlso Adapter.DeleteCommand IsNot Nothing Then
                    Adapter.DeleteCommand.Transaction = _transaction
                End If
                If Adapter IsNot Nothing AndAlso Adapter.InsertCommand IsNot Nothing Then
                    Adapter.InsertCommand.Transaction = _transaction
                End If
                If Adapter IsNot Nothing AndAlso Adapter.UpdateCommand IsNot Nothing Then
                    Adapter.UpdateCommand.Transaction = _transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected ReadOnly Property CommandCollection As Global.System.Data.SqlClient.SqlCommand()
            Get
                If _commandCollection Is Nothing Then
                    InitCommandCollection()
                End If
                Return _commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Property ClearBeforeFill As Boolean
            Get
                Return _clearBeforeFill
            End Get
            Set(value As Boolean)
                _clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Sub InitAdapter()
            _adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TroubleTicketReq"
            tableMapping.ColumnMappings.Add("AgentID", "AgentID")
            tableMapping.ColumnMappings.Add("CustomerID", "CustomerID")
            tableMapping.ColumnMappings.Add("TroubleTicketNo", "TroubleTicketNo")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("DueDate", "DueDate")
            tableMapping.ColumnMappings.Add("RequestDate", "RequestDate")
            _adapter.TableMappings.Add(tableMapping)
            _adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            _adapter.DeleteCommand.Connection = Connection
            _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TroubleTicketReq] WHERE (([TroubleTicketNo] = @Original_Troubl" & "eTicketNo))"
            _adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            _adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TroubleTicketNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TroubleTicketNo", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            _adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            _adapter.InsertCommand.Connection = Connection
            _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TroubleTicketReq] ([AgentID], [CustomerID], [Status], [Type], " & "[DueDate], [RequestDate]) VALUES (@AgentID, @CustomerID, @Status, @Type, @DueDat" & "e, @RequestDate)"
            _adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AgentID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AgentID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DueDate", Global.System.Data.SqlDbType.Date, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DueDate", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestDate", Global.System.Data.SqlDbType.Date, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestDate", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            _adapter.UpdateCommand.Connection = Connection
            _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TroubleTicketReq] SET [AgentID] = @AgentID, [CustomerID] = @Custome" & "rID, [Status] = @Status, [Type] = @Type, [DueDate] = @DueDate, [RequestDate] = @" & "RequestDate WHERE (([TroubleTicketNo] = @Original_TroubleTicketNo))"
            _adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AgentID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AgentID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DueDate", Global.System.Data.SqlDbType.Date, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DueDate", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestDate", Global.System.Data.SqlDbType.Date, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestDate", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TroubleTicketNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TroubleTicketNo", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Sub InitConnection()
            _connection = New Global.System.Data.SqlClient.SqlConnection()
            _connection.ConnectionString = Configuration.ConfigurationManager.ConnectionStrings("NotificationSystemConnectionString1").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Sub InitCommandCollection()
            _commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            _commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            _commandCollection(0).Connection = Connection
            _commandCollection(0).CommandText = "SELECT AgentID, CustomerID, TroubleTicketNo, Status, Type, DueDate, RequestDate F" & "ROM dbo.TroubleTicketReq"
            _commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            _commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            _commandCollection(1).Connection = Connection
            _commandCollection(1).CommandText = "SELECT AgentID, CustomerID, TroubleTicketNo, Status, Type, DueDate, RequestDate F" & "ROM dbo.TroubleTicketReq" & vbCrLf & "WHERE AgentID = @AgentID"
            _commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            _commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AgentID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "AgentID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            _commandCollection(2).Connection = Connection
            _commandCollection(2).CommandText = "SELECT AgentID, CustomerID, TroubleTicketNo, Status, Type, DueDate, RequestDate F" & "ROM dbo.TroubleTicketReq" & vbCrLf & "WHERE CustomerID = @CustomerID"
            _commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            _commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            _commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            _commandCollection(3).Connection = Connection
            _commandCollection(3).CommandText = "SELECT AgentID, CustomerID, TroubleTicketNo, Status, Type, DueDate, RequestDate F" & "ROM dbo.TroubleTicketReq" & vbCrLf & "WHERE TroubleTicketNo = @TroubleTicketNo"
            _commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            _commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TroubleTicketNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TroubleTicketNo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
        Public Overridable Function Fill(dataTable As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable) As Integer
            Adapter.SelectCommand = CommandCollection(0)
            If ClearBeforeFill = True Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)>
        Public Overridable Function GetData() As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable
            Adapter.SelectCommand = CommandCollection(0)
            Dim dataTable As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable = New NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable()
            Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)>
        Public Overridable Function FillByAgentID(dataTable As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable, AgentID As Global.System.Nullable(Of Integer)) As Integer
            Adapter.SelectCommand = CommandCollection(1)
            If AgentID.HasValue = True Then
                Adapter.SelectCommand.Parameters(0).Value = CInt(AgentID.Value)
            Else
                Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If ClearBeforeFill = True Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, False)>
        Public Overridable Function GetDataByAgentID(AgentID As Global.System.Nullable(Of Integer)) As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable
            Adapter.SelectCommand = CommandCollection(1)
            If AgentID.HasValue = True Then
                Adapter.SelectCommand.Parameters(0).Value = CInt(AgentID.Value)
            Else
                Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable = New NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable()
            Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)>
        Public Overridable Function FillByCustomerID(dataTable As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable, CustomerID As Global.System.Nullable(Of Integer)) As Integer
            Adapter.SelectCommand = CommandCollection(2)
            If CustomerID.HasValue = True Then
                Adapter.SelectCommand.Parameters(0).Value = CInt(CustomerID.Value)
            Else
                Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If ClearBeforeFill = True Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, False)>
        Public Overridable Function GetDataByCustomerID(CustomerID As Global.System.Nullable(Of Integer)) As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable
            Adapter.SelectCommand = CommandCollection(2)
            If CustomerID.HasValue = True Then
                Adapter.SelectCommand.Parameters(0).Value = CInt(CustomerID.Value)
            Else
                Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable = New NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable()
            Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)>
        Public Overridable Function FillByTroubleTicketNo(dataTable As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable, TroubleTicketNo As Integer) As Integer
            Adapter.SelectCommand = CommandCollection(3)
            Adapter.SelectCommand.Parameters(0).Value = TroubleTicketNo
            If ClearBeforeFill = True Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, False)>
        Public Overridable Function GetDataByTroubleTicketNo(TroubleTicketNo As Integer) As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable
            Adapter.SelectCommand = CommandCollection(3)
            Adapter.SelectCommand.Parameters(0).Value = TroubleTicketNo
            Dim dataTable As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable = New NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable()
            Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(dataTable As NotificationSystem.NotificationSystem.Data.xsReports.TroubleTicketReqDataTable) As Integer
            Return Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(dataSet As NotificationSystem.NotificationSystem.Data.xsReports) As Integer
            Return Adapter.Update(dataSet, "TroubleTicketReq")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(dataRow As Global.System.Data.DataRow) As Integer
            Return Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(dataRows As Global.System.Data.DataRow()) As Integer
            Return Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
        Public Overridable Function Delete(Original_TroubleTicketNo As Integer) As Integer
            Adapter.DeleteCommand.Parameters(0).Value = Original_TroubleTicketNo
            Dim previousConnectionState As Global.System.Data.ConnectionState = Adapter.DeleteCommand.Connection.State
            If (Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open Then
                Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Adapter.DeleteCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If previousConnectionState = Global.System.Data.ConnectionState.Closed Then
                    Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
        Public Overridable Function Insert(AgentID As Global.System.Nullable(Of Integer), CustomerID As Global.System.Nullable(Of Integer), Status As String, Type As String, DueDate As Global.System.Nullable(Of Global.System.DateTime), RequestDate As Global.System.Nullable(Of Global.System.DateTime)) As Integer
            If AgentID.HasValue = True Then
                Adapter.InsertCommand.Parameters(0).Value = CInt(AgentID.Value)
            Else
                Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If CustomerID.HasValue = True Then
                Adapter.InsertCommand.Parameters(1).Value = CInt(CustomerID.Value)
            Else
                Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If Equals(Status, Nothing) Then
                Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(2).Value = Status
            End If
            If Equals(Type, Nothing) Then
                Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Adapter.InsertCommand.Parameters(3).Value = Type
            End If
            If DueDate.HasValue = True Then
                Adapter.InsertCommand.Parameters(4).Value = CDate(DueDate.Value)
            Else
                Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If RequestDate.HasValue = True Then
                Adapter.InsertCommand.Parameters(5).Value = CDate(RequestDate.Value)
            Else
                Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Adapter.InsertCommand.Connection.State
            If (Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open Then
                Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Adapter.InsertCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If previousConnectionState = Global.System.Data.ConnectionState.Closed Then
                    Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
        Public Overridable Function Update(AgentID As Global.System.Nullable(Of Integer), CustomerID As Global.System.Nullable(Of Integer), Status As String, Type As String, DueDate As Global.System.Nullable(Of Global.System.DateTime), RequestDate As Global.System.Nullable(Of Global.System.DateTime), Original_TroubleTicketNo As Integer) As Integer
            If AgentID.HasValue = True Then
                Adapter.UpdateCommand.Parameters(0).Value = CInt(AgentID.Value)
            Else
                Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If CustomerID.HasValue = True Then
                Adapter.UpdateCommand.Parameters(1).Value = CInt(CustomerID.Value)
            Else
                Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If Equals(Status, Nothing) Then
                Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(2).Value = Status
            End If
            If Equals(Type, Nothing) Then
                Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Adapter.UpdateCommand.Parameters(3).Value = Type
            End If
            If DueDate.HasValue = True Then
                Adapter.UpdateCommand.Parameters(4).Value = CDate(DueDate.Value)
            Else
                Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If RequestDate.HasValue = True Then
                Adapter.UpdateCommand.Parameters(5).Value = CDate(RequestDate.Value)
            Else
                Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Adapter.UpdateCommand.Parameters(6).Value = Original_TroubleTicketNo
            Dim previousConnectionState As Global.System.Data.ConnectionState = Adapter.UpdateCommand.Connection.State
            If (Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open Then
                Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Adapter.UpdateCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If previousConnectionState = Global.System.Data.ConnectionState.Closed Then
                    Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    ''' <summary>
    ''' Represents the connection and commands used to retrieve and save data.
    ''' </summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code")>
    <Global.System.ComponentModel.ToolboxItemAttribute(True)>
    <Global.System.ComponentModel.DataObjectAttribute(True)>
    <Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")>
    <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Partial Class rptCustomerTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection As Global.System.Data.SqlClient.SqlCommand()

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Sub New()
            ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected Friend ReadOnly Property Adapter As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If _adapter Is Nothing Then
                    InitAdapter()
                End If
                Return _adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Friend Property Connection As Global.System.Data.SqlClient.SqlConnection
            Get
                If _connection Is Nothing Then
                    InitConnection()
                End If
                Return _connection
            End Get
            Set(value As Global.System.Data.SqlClient.SqlConnection)
                _connection = value
                If Adapter.InsertCommand IsNot Nothing Then
                    Adapter.InsertCommand.Connection = value
                End If
                If Adapter.DeleteCommand IsNot Nothing Then
                    Adapter.DeleteCommand.Connection = value
                End If
                If Adapter.UpdateCommand IsNot Nothing Then
                    Adapter.UpdateCommand.Connection = value
                End If
                Dim i = 0

                While i < CommandCollection.Length
                    If CommandCollection(i) IsNot Nothing Then
                        CType(CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If

                    i = i + 1
                End While
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Friend Property Transaction As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(value As Global.System.Data.SqlClient.SqlTransaction)
                _transaction = value
                Dim i = 0

                While i < CommandCollection.Length
                    CommandCollection(i).Transaction = _transaction
                    i = i + 1
                End While
                If Adapter IsNot Nothing AndAlso Adapter.DeleteCommand IsNot Nothing Then
                    Adapter.DeleteCommand.Transaction = _transaction
                End If
                If Adapter IsNot Nothing AndAlso Adapter.InsertCommand IsNot Nothing Then
                    Adapter.InsertCommand.Transaction = _transaction
                End If
                If Adapter IsNot Nothing AndAlso Adapter.UpdateCommand IsNot Nothing Then
                    Adapter.UpdateCommand.Transaction = _transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected ReadOnly Property CommandCollection As Global.System.Data.SqlClient.SqlCommand()
            Get
                If _commandCollection Is Nothing Then
                    InitCommandCollection()
                End If
                Return _commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Property ClearBeforeFill As Boolean
            Get
                Return _clearBeforeFill
            End Get
            Set(value As Boolean)
                _clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Sub InitAdapter()
            _adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "rptCustomer"
            tableMapping.ColumnMappings.Add("CustomerID", "CustomerID")
            tableMapping.ColumnMappings.Add("FirstN", "FirstN")
            tableMapping.ColumnMappings.Add("LastN", "LastN")
            tableMapping.ColumnMappings.Add("Email", "Email")
            tableMapping.ColumnMappings.Add("Phone", "Phone")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("TroubleTicketNo", "TroubleTicketNo")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("RequestDate", "RequestDate")
            tableMapping.ColumnMappings.Add("DueDate", "DueDate")
            _adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Sub InitConnection()
            _connection = New Global.System.Data.SqlClient.SqlConnection()
            _connection.ConnectionString = Configuration.ConfigurationManager.ConnectionStrings("NotificationSystemConnectionString1").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Sub InitCommandCollection()
            _commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            _commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            _commandCollection(0).Connection = Connection
            _commandCollection(0).CommandText = "SELECT Customer.CustomerID, Customer.FirstN, Customer.LastN, Customer.Email, Customer.Phone, Customer.Address, Customer.City, Customer.State, Customer.Zip, TroubleTicketReq.TroubleTicketNo, TroubleTicketReq.Status, TroubleTicketReq.Type, TroubleTicketReq.RequestDate, 
             TroubleTicketReq.DueDate
FROM   Customer INNER JOIN
             TroubleTicketReq ON Customer.CustomerID = TroubleTicketReq.CustomerID"
            _commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            _commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            _commandCollection(1).Connection = Connection
            _commandCollection(1).CommandText = "SELECT Customer.CustomerID, Customer.FirstN, Customer.LastN, Customer.Email, Customer.Phone, Customer.Address, Customer.City, Customer.State, Customer.Zip, TroubleTicketReq.TroubleTicketNo, TroubleTicketReq.Status, TroubleTicketReq.Type, TroubleTicketReq.RequestDate, 
             TroubleTicketReq.DueDate
FROM   Customer INNER JOIN
             TroubleTicketReq ON Customer.CustomerID = TroubleTicketReq.CustomerID

WHERE (Customer.CustomerID = @CustomerID)"
            _commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            _commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
        Public Overridable Function FillrptCustomer(dataTable As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable) As Integer
            Adapter.SelectCommand = CommandCollection(0)
            If ClearBeforeFill = True Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)>
        Public Overridable Function GetDatarptCustomer() As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable
            Adapter.SelectCommand = CommandCollection(0)
            Dim dataTable As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable = New NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable()
            Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)>
        Public Overridable Function FillByCustomerID(dataTable As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable, CustomerID As Integer) As Integer
            Adapter.SelectCommand = CommandCollection(1)
            Adapter.SelectCommand.Parameters(0).Value = CustomerID
            If ClearBeforeFill = True Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, False)>
        Public Overridable Function GetDataByCustomerID(CustomerID As Integer) As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable
            Adapter.SelectCommand = CommandCollection(1)
            Adapter.SelectCommand.Parameters(0).Value = CustomerID
            Dim dataTable As NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable = New NotificationSystem.NotificationSystem.Data.xsReports.rptCustomerDataTable()
            Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class

    ''' <summary>
    ''' Represents the connection and commands used to retrieve and save data.
    ''' </summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code")>
    <Global.System.ComponentModel.ToolboxItemAttribute(True)>
    <Global.System.ComponentModel.DataObjectAttribute(True)>
    <Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")>
    <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Partial Class rptAgentTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection As Global.System.Data.SqlClient.SqlCommand()

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Sub New()
            ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected Friend ReadOnly Property Adapter As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If _adapter Is Nothing Then
                    InitAdapter()
                End If
                Return _adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Friend Property Connection As Global.System.Data.SqlClient.SqlConnection
            Get
                If _connection Is Nothing Then
                    InitConnection()
                End If
                Return _connection
            End Get
            Set(value As Global.System.Data.SqlClient.SqlConnection)
                _connection = value
                If Adapter.InsertCommand IsNot Nothing Then
                    Adapter.InsertCommand.Connection = value
                End If
                If Adapter.DeleteCommand IsNot Nothing Then
                    Adapter.DeleteCommand.Connection = value
                End If
                If Adapter.UpdateCommand IsNot Nothing Then
                    Adapter.UpdateCommand.Connection = value
                End If
                Dim i = 0

                While i < CommandCollection.Length
                    If CommandCollection(i) IsNot Nothing Then
                        CType(CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If

                    i = i + 1
                End While
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Friend Property Transaction As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(value As Global.System.Data.SqlClient.SqlTransaction)
                _transaction = value
                Dim i = 0

                While i < CommandCollection.Length
                    CommandCollection(i).Transaction = _transaction
                    i = i + 1
                End While
                If Adapter IsNot Nothing AndAlso Adapter.DeleteCommand IsNot Nothing Then
                    Adapter.DeleteCommand.Transaction = _transaction
                End If
                If Adapter IsNot Nothing AndAlso Adapter.InsertCommand IsNot Nothing Then
                    Adapter.InsertCommand.Transaction = _transaction
                End If
                If Adapter IsNot Nothing AndAlso Adapter.UpdateCommand IsNot Nothing Then
                    Adapter.UpdateCommand.Transaction = _transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected ReadOnly Property CommandCollection As Global.System.Data.SqlClient.SqlCommand()
            Get
                If _commandCollection Is Nothing Then
                    InitCommandCollection()
                End If
                Return _commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Property ClearBeforeFill As Boolean
            Get
                Return _clearBeforeFill
            End Get
            Set(value As Boolean)
                _clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Sub InitAdapter()
            _adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "rptAgent"
            tableMapping.ColumnMappings.Add("AgentID", "AgentID")
            tableMapping.ColumnMappings.Add("Title", "Title")
            tableMapping.ColumnMappings.Add("FirstN", "FirstN")
            tableMapping.ColumnMappings.Add("LastN", "LastN")
            tableMapping.ColumnMappings.Add("Email", "Email")
            tableMapping.ColumnMappings.Add("Phone", "Phone")
            tableMapping.ColumnMappings.Add("Fax", "Fax")
            tableMapping.ColumnMappings.Add("TroubleTicketNo", "TroubleTicketNo")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("RequestDate", "RequestDate")
            tableMapping.ColumnMappings.Add("DueDate", "DueDate")
            _adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Sub InitConnection()
            _connection = New Global.System.Data.SqlClient.SqlConnection()
            _connection.ConnectionString = Configuration.ConfigurationManager.ConnectionStrings("NotificationSystemConnectionString1").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Sub InitCommandCollection()
            _commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            _commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            _commandCollection(0).Connection = Connection
            _commandCollection(0).CommandText = "SELECT Agent.AgentID, Agent.Title, Agent.FirstN, Agent.LastN, Agent.Email, Agent.Phone, Agent.Fax, TroubleTicketReq.TroubleTicketNo, TroubleTicketReq.Status, TroubleTicketReq.Type, TroubleTicketReq.RequestDate, TroubleTicketReq.DueDate
FROM   Agent INNER JOIN
             TroubleTicketReq ON Agent.AgentID = TroubleTicketReq.AgentID"
            _commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            _commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            _commandCollection(1).Connection = Connection
            _commandCollection(1).CommandText = "SELECT Agent.AgentID, Agent.Title, Agent.FirstN, Agent.LastN, Agent.Email, Agent.Phone, Agent.Fax, TroubleTicketReq.TroubleTicketNo, TroubleTicketReq.Status, TroubleTicketReq.Type, TroubleTicketReq.RequestDate, TroubleTicketReq.DueDate
FROM   Agent INNER JOIN
             TroubleTicketReq ON Agent.AgentID = TroubleTicketReq.AgentID
WHERE (Agent.AgentID = @AgentID)"
            _commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            _commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AgentID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "AgentID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
        Public Overridable Function FillrptAgent(dataTable As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable) As Integer
            Adapter.SelectCommand = CommandCollection(0)
            If ClearBeforeFill = True Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)>
        Public Overridable Function GetDatarptAgent() As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable
            Adapter.SelectCommand = CommandCollection(0)
            Dim dataTable As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable = New NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable()
            Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)>
        Public Overridable Function FillByAgentID(dataTable As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable, AgentID As Integer) As Integer
            Adapter.SelectCommand = CommandCollection(1)
            Adapter.SelectCommand.Parameters(0).Value = AgentID
            If ClearBeforeFill = True Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, False)>
        Public Overridable Function GetDataByAgentID(AgentID As Integer) As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable
            Adapter.SelectCommand = CommandCollection(1)
            Adapter.SelectCommand.Parameters(0).Value = AgentID
            Dim dataTable As NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable = New NotificationSystem.NotificationSystem.Data.xsReports.rptAgentDataTable()
            Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class

    ''' <summary>
    ''' TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ''' </summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code")>
    <Global.System.ComponentModel.ToolboxItemAttribute(True)>
    <Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" & "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")>
    <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>
    Public Partial Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component

        Private _updateOrder As NotificationSystem.NotificationSystem.Data.xsReportsTableAdapters.TableAdapterManager.UpdateOrderOption

        Private _agentTableAdapter As NotificationSystem.NotificationSystem.Data.xsReportsTableAdapters.AgentTableAdapter

        Private _customerTableAdapter As NotificationSystem.NotificationSystem.Data.xsReportsTableAdapters.CustomerTableAdapter

        Private _troubleTicketReqTableAdapter As NotificationSystem.NotificationSystem.Data.xsReportsTableAdapters.TroubleTicketReqTableAdapter

        Private _backupDataSetBeforeUpdate As Boolean

        Private _connection As Global.System.Data.IDbConnection

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Property UpdateOrder As NotificationSystem.NotificationSystem.Data.xsReportsTableAdapters.TableAdapterManager.UpdateOrderOption
            Get
                Return _updateOrder
            End Get
            Set(value As NotificationSystem.NotificationSystem.Data.xsReportsTableAdapters.TableAdapterManager.UpdateOrderOption)
                _updateOrder = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & "a", "System.Drawing.Design.UITypeEditor")>
        Public Property AgentTableAdapter As NotificationSystem.NotificationSystem.Data.xsReportsTableAdapters.AgentTableAdapter
            Get
                Return _agentTableAdapter
            End Get
            Set(value As NotificationSystem.NotificationSystem.Data.xsReportsTableAdapters.AgentTableAdapter)
                _agentTableAdapter = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & "a", "System.Drawing.Design.UITypeEditor")>
        Public Property CustomerTableAdapter As NotificationSystem.NotificationSystem.Data.xsReportsTableAdapters.CustomerTableAdapter
            Get
                Return _customerTableAdapter
            End Get
            Set(value As NotificationSystem.NotificationSystem.Data.xsReportsTableAdapters.CustomerTableAdapter)
                _customerTableAdapter = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & "a", "System.Drawing.Design.UITypeEditor")>
        Public Property TroubleTicketReqTableAdapter As NotificationSystem.NotificationSystem.Data.xsReportsTableAdapters.TroubleTicketReqTableAdapter
            Get
                Return _troubleTicketReqTableAdapter
            End Get
            Set(value As NotificationSystem.NotificationSystem.Data.xsReportsTableAdapters.TroubleTicketReqTableAdapter)
                _troubleTicketReqTableAdapter = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Property BackupDataSetBeforeUpdate As Boolean
            Get
                Return _backupDataSetBeforeUpdate
            End Get
            Set(value As Boolean)
                _backupDataSetBeforeUpdate = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.BrowsableAttribute(False)>
        Public Property Connection As Global.System.Data.IDbConnection
            Get
                If _connection IsNot Nothing Then
                    Return _connection
                End If
                If _agentTableAdapter IsNot Nothing AndAlso _agentTableAdapter.Connection IsNot Nothing Then
                    Return _agentTableAdapter.Connection
                End If
                If _customerTableAdapter IsNot Nothing AndAlso _customerTableAdapter.Connection IsNot Nothing Then
                    Return _customerTableAdapter.Connection
                End If
                If _troubleTicketReqTableAdapter IsNot Nothing AndAlso _troubleTicketReqTableAdapter.Connection IsNot Nothing Then
                    Return _troubleTicketReqTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set(value As Global.System.Data.IDbConnection)
                _connection = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        <Global.System.ComponentModel.BrowsableAttribute(False)>
        Public ReadOnly Property TableAdapterInstanceCount As Integer
            Get
                Dim count = 0
                If _agentTableAdapter IsNot Nothing Then
                    count = count + 1
                End If
                If _customerTableAdapter IsNot Nothing Then
                    count = count + 1
                End If
                If _troubleTicketReqTableAdapter IsNot Nothing Then
                    count = count + 1
                End If
                Return count
            End Get
        End Property

        ''' <summary>
        ''' Update rows in top-down order.
        ''' </summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Function UpdateUpdatedRows(dataSet As NotificationSystem.NotificationSystem.Data.xsReports, allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result = 0
            If _agentTableAdapter IsNot Nothing Then
                Dim updatedRows As Global.System.Data.DataRow() = dataSet.Agent.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If updatedRows IsNot Nothing AndAlso 0 < updatedRows.Length Then
                    result = result + _agentTableAdapter.Update(updatedRows)
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If _customerTableAdapter IsNot Nothing Then
                Dim updatedRows As Global.System.Data.DataRow() = dataSet.Customer.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If updatedRows IsNot Nothing AndAlso 0 < updatedRows.Length Then
                    result = result + _customerTableAdapter.Update(updatedRows)
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If _troubleTicketReqTableAdapter IsNot Nothing Then
                Dim updatedRows As Global.System.Data.DataRow() = dataSet.TroubleTicketReq.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If updatedRows IsNot Nothing AndAlso 0 < updatedRows.Length Then
                    result = result + _troubleTicketReqTableAdapter.Update(updatedRows)
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function

        ''' <summary>
        ''' Insert rows in top-down order.
        ''' </summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Function UpdateInsertedRows(dataSet As NotificationSystem.NotificationSystem.Data.xsReports, allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result = 0
            If _agentTableAdapter IsNot Nothing Then
                Dim addedRows As Global.System.Data.DataRow() = dataSet.Agent.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If addedRows IsNot Nothing AndAlso 0 < addedRows.Length Then
                    result = result + _agentTableAdapter.Update(addedRows)
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If _customerTableAdapter IsNot Nothing Then
                Dim addedRows As Global.System.Data.DataRow() = dataSet.Customer.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If addedRows IsNot Nothing AndAlso 0 < addedRows.Length Then
                    result = result + _customerTableAdapter.Update(addedRows)
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If _troubleTicketReqTableAdapter IsNot Nothing Then
                Dim addedRows As Global.System.Data.DataRow() = dataSet.TroubleTicketReq.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If addedRows IsNot Nothing AndAlso 0 < addedRows.Length Then
                    result = result + _troubleTicketReqTableAdapter.Update(addedRows)
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function

        ''' <summary>
        ''' Delete rows in bottom-up order.
        ''' </summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Function UpdateDeletedRows(dataSet As NotificationSystem.NotificationSystem.Data.xsReports, allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result = 0
            If _troubleTicketReqTableAdapter IsNot Nothing Then
                Dim deletedRows As Global.System.Data.DataRow() = dataSet.TroubleTicketReq.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If deletedRows IsNot Nothing AndAlso 0 < deletedRows.Length Then
                    result = result + _troubleTicketReqTableAdapter.Update(deletedRows)
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If _customerTableAdapter IsNot Nothing Then
                Dim deletedRows As Global.System.Data.DataRow() = dataSet.Customer.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If deletedRows IsNot Nothing AndAlso 0 < deletedRows.Length Then
                    result = result + _customerTableAdapter.Update(deletedRows)
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If _agentTableAdapter IsNot Nothing Then
                Dim deletedRows As Global.System.Data.DataRow() = dataSet.Agent.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If deletedRows IsNot Nothing AndAlso 0 < deletedRows.Length Then
                    result = result + _agentTableAdapter.Update(deletedRows)
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function

        ''' <summary>
        ''' Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ''' </summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Function GetRealUpdatedRows(updatedRows As Global.System.Data.DataRow(), allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If updatedRows Is Nothing OrElse updatedRows.Length < 1 Then
                Return updatedRows
            End If
            If allAddedRows Is Nothing OrElse allAddedRows.Count < 1 Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i = 0

            While i < updatedRows.Length
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If allAddedRows.Contains(row) = False Then
                    realUpdatedRows.Add(row)
                End If

                i = i + 1
            End While
            Return realUpdatedRows.ToArray()
        End Function

        ''' <summary>
        ''' Update all changes to the dataset.
        ''' </summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Overridable Function UpdateAll(dataSet As NotificationSystem.NotificationSystem.Data.xsReports) As Integer
            If dataSet Is Nothing Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges() = False) Then
                Return 0
            End If
            If _agentTableAdapter IsNot Nothing AndAlso Me.MatchTableAdapterConnection(_agentTableAdapter.Connection) = False Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & "tring.")
            End If
            If _customerTableAdapter IsNot Nothing AndAlso Me.MatchTableAdapterConnection(_customerTableAdapter.Connection) = False Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & "tring.")
            End If
            If _troubleTicketReqTableAdapter IsNot Nothing AndAlso Me.MatchTableAdapterConnection(_troubleTicketReqTableAdapter.Connection) = False Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Connection
            If workConnection Is Nothing Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" & "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened = False
            If (workConnection.State And Global.System.Data.ConnectionState.Broken) = Global.System.Data.ConnectionState.Broken Then
                workConnection.Close()
            End If
            If workConnection.State = Global.System.Data.ConnectionState.Closed Then
                workConnection.Open()
                workConnOpened = True
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction()
            If workTransaction Is Nothing Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" & "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try
                ' ---- Prepare for update -----------
                '
                If _agentTableAdapter IsNot Nothing Then
                    revertConnections.Add(_agentTableAdapter, _agentTableAdapter.Connection)
                    _agentTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                    _agentTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                    If _agentTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        _agentTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                        adaptersWithAcceptChangesDuringUpdate.Add(_agentTableAdapter.Adapter)
                    End If
                End If
                If _customerTableAdapter IsNot Nothing Then
                    revertConnections.Add(_customerTableAdapter, _customerTableAdapter.Connection)
                    _customerTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                    _customerTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                    If _customerTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        _customerTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                        adaptersWithAcceptChangesDuringUpdate.Add(_customerTableAdapter.Adapter)
                    End If
                End If
                If _troubleTicketReqTableAdapter IsNot Nothing Then
                    revertConnections.Add(_troubleTicketReqTableAdapter, _troubleTicketReqTableAdapter.Connection)
                    _troubleTicketReqTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                    _troubleTicketReqTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                    If _troubleTicketReqTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        _troubleTicketReqTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                        adaptersWithAcceptChangesDuringUpdate.Add(_troubleTicketReqTableAdapter.Adapter)
                    End If
                End If
                ' 
                '---- Perform updates -----------
                '
                If UpdateOrder Is NotificationSystem.NotificationSystem.Data.xsReportsTableAdapters.TableAdapterManager.UpdateOrderOption.UpdateInsertDelete Then
                    result = result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows)
                    result = result + Me.UpdateInsertedRows(dataSet, allAddedRows)
                Else
                    result = result + Me.UpdateInsertedRows(dataSet, allAddedRows)
                    result = result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows)
                End If
                result = result + Me.UpdateDeletedRows(dataSet, allChangedRows)
                ' 
                '---- Commit updates -----------
                '
                workTransaction.Commit()
                If 0 < allAddedRows.Count Then
                    Dim rows As Global.System.Data.DataRow() = New System.Data.DataRow(allAddedRows.Count - 1) {}
                    allAddedRows.CopyTo(rows)
                    Dim i = 0

                    While i < rows.Length
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges()
                        i = i + 1
                    End While
                End If
                If 0 < allChangedRows.Count Then
                    Dim rows As Global.System.Data.DataRow() = New System.Data.DataRow(allChangedRows.Count - 1) {}
                    allChangedRows.CopyTo(rows)
                    Dim i = 0

                    While i < rows.Length
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges()
                        i = i + 1
                    End While
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback()
                ' ---- Restore the dataset -----------
                If BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert(backupDataSet IsNot Nothing)
                    dataSet.Clear()
                    dataSet.Merge(backupDataSet)
                Else
                    If 0 < allAddedRows.Count Then
                        Dim rows As Global.System.Data.DataRow() = New System.Data.DataRow(allAddedRows.Count - 1) {}
                        allAddedRows.CopyTo(rows)
                        Dim i = 0

                        While i < rows.Length
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges()
                            row.SetAdded()
                            i = i + 1
                        End While
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close()
                End If
                If _agentTableAdapter IsNot Nothing Then
                    _agentTableAdapter.Connection = CType(revertConnections(_agentTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                    _agentTableAdapter.Transaction = Nothing
                End If
                If _customerTableAdapter IsNot Nothing Then
                    _customerTableAdapter.Connection = CType(revertConnections(_customerTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                    _customerTableAdapter.Transaction = Nothing
                End If
                If _troubleTicketReqTableAdapter IsNot Nothing Then
                    _troubleTicketReqTableAdapter.Connection = CType(revertConnections(_troubleTicketReqTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                    _troubleTicketReqTableAdapter.Transaction = Nothing
                End If
                If 0 < adaptersWithAcceptChangesDuringUpdate.Count Then
                    Dim adapters As Global.System.Data.Common.DataAdapter() = New System.Data.Common.DataAdapter(adaptersWithAcceptChangesDuringUpdate.Count - 1) {}
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i = 0

                    While i < adapters.Length
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = True
                        i = i + 1
                    End While
                End If
            End Try
            Return result
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected Overridable Sub SortSelfReferenceRows(rows As Global.System.Data.DataRow(), relation As Global.System.Data.DataRelation, childFirst As Boolean)
            Call Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New NotificationSystem.NotificationSystem.Data.xsReportsTableAdapters.TableAdapterManager.SelfReferenceComparer(relation, childFirst))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Protected Overridable Function MatchTableAdapterConnection(inputConnection As Global.System.Data.IDbConnection) As Boolean
            If _connection IsNot Nothing Then
                Return True
            End If
            If Connection Is Nothing OrElse inputConnection Is Nothing Then
                Return True
            End If
            If String.Equals(Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return True
            End If
            Return False
        End Function

        ''' <summary>
        ''' Update Order Option
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Public Enum UpdateOrderOption

            InsertUpdateDelete = 0

            UpdateInsertDelete = 1
        End Enum

        ''' <summary>
        ''' Used to sort self-referenced table's rows
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)

            Private _relation As Global.System.Data.DataRelation

            Private _childFirst As Integer

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Friend Sub New(relation As Global.System.Data.DataRelation, childFirst As Boolean)
                _relation = relation
                If childFirst Then
                    _childFirst = -1
                Else
                    _childFirst = 1
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Private Function GetRoot(row As Global.System.Data.DataRow, <Out> ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert(row IsNot Nothing)
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(_relation, Global.System.Data.DataRowVersion.Default)
                While parent IsNot Nothing AndAlso traversedRows.ContainsKey(parent) = False

                    distance = distance + 1
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(_relation, Global.System.Data.DataRowVersion.Default)
                End While

                If distance = 0 Then
                    traversedRows.Clear()
                    traversedRows(row) = row
                    parent = row.GetParentRow(_relation, Global.System.Data.DataRowVersion.Original)
                    While parent IsNot Nothing AndAlso traversedRows.ContainsKey(parent) = False

                        distance = distance + 1
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(_relation, Global.System.Data.DataRowVersion.Original)
                    End While
                End If

                Return root
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
            Public Function Compare(row1 As Global.System.Data.DataRow, row2 As Global.System.Data.DataRow) As Integer Implements IComparer(Of System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If row1 Is Nothing Then
                    Return -1
                End If
                If row2 Is Nothing Then
                    Return 1
                End If

                Dim distance1 = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return _childFirst * distance1.CompareTo(distance2)
                Else
                    Global.System.Diagnostics.Debug.Assert(root1.Table IsNot Nothing AndAlso root2.Table IsNot Nothing)
                    If root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
